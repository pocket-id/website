{
  "swagger": "2.0",
  "info": {
    "contact": {}
  },
  "paths": {
    "/.well-known/jwks.json": {
      "get": {
        "description": "Returns the JSON Web Key Set used for token verification",
        "produces": ["application/json"],
        "tags": ["OIDC Discovery"],
        "summary": "Get JSON Web Key Set (JWKS)",
        "responses": {
          "200": {
            "description": "{ \\\"keys\\\": []interface{} }",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/.well-known/openid-configuration": {
      "get": {
        "description": "Returns the OpenID Connect discovery document with endpoints and capabilities",
        "produces": ["application/json"],
        "tags": ["OIDC Discovery"],
        "summary": "Get OpenID Connect discovery configuration",
        "responses": {
          "200": {
            "description": "OpenID Connect configuration",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api-keys": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get a paginated list of API keys belonging to the current user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["API Keys"],
        "summary": "List API keys",
        "parameters": [
          {
            "type": "integer",
            "default": 1,
            "description": "Page number, starting from 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"created_at\"",
            "description": "Column to sort by",
            "name": "sort_column",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"desc\"",
            "description": "Sort direction (asc or desc)",
            "name": "sort_direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"data\\\": []dto.ApiKeyDto, \\\"pagination\\\": utils.Pagination }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new API key for the current user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["API Keys"],
        "summary": "Create API key",
        "parameters": [
          {
            "description": "API key information",
            "name": "api_key",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyCreateDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created API key with token",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyResponseDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api-keys/{id}": {
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Revoke (delete) an existing API key by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["API Keys"],
        "summary": "Revoke API key",
        "parameters": [
          {
            "type": "string",
            "description": "API Key ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Not owner of the API key",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "API key not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration": {
      "get": {
        "description": "Get all public application configurations",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Application Configuration"],
        "summary": "List public application configurations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.PublicAppConfigVariableDto"
              }
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update application configuration settings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Application Configuration"],
        "summary": "Update application configurations",
        "parameters": [
          {
            "description": "Application Configuration",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigVariableDto"
              }
            }
          },
          "400": {
            "description": "{\"error\": \"Validation error\"}",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration/all": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get all application configurations including private ones",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Application Configuration"],
        "summary": "List all application configurations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigVariableDto"
              }
            }
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration/background-image": {
      "get": {
        "description": "Get the background image for the application",
        "produces": ["image/png", "image/jpeg"],
        "tags": ["Application Configuration"],
        "summary": "Get background image",
        "responses": {
          "200": {
            "description": "Background image",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "{\"error\": \"File not found\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the application background image",
        "consumes": ["multipart/form-data"],
        "tags": ["Application Configuration"],
        "summary": "Update background image",
        "parameters": [
          {
            "type": "file",
            "description": "Background image file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "{\"error\": \"Invalid file\"}",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration/favicon": {
      "get": {
        "description": "Get the favicon for the application",
        "produces": ["image/x-icon"],
        "tags": ["Application Configuration"],
        "summary": "Get favicon",
        "responses": {
          "200": {
            "description": "Favicon image",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "{\"error\": \"File not found\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the application favicon",
        "consumes": ["multipart/form-data"],
        "tags": ["Application Configuration"],
        "summary": "Update favicon",
        "parameters": [
          {
            "type": "file",
            "description": "Favicon file (.ico)",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "{\"error\": \"Invalid file type, expected .ico\"}",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration/logo": {
      "get": {
        "description": "Get the logo image for the application",
        "produces": ["image/png", "image/jpeg", "image/svg+xml"],
        "tags": ["Application Configuration"],
        "summary": "Get logo image",
        "parameters": [
          {
            "type": "boolean",
            "description": "Light mode logo (true) or dark mode logo (false)",
            "name": "light",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Logo image",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "{\"error\": \"File not found\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the application logo",
        "consumes": ["multipart/form-data"],
        "tags": ["Application Configuration"],
        "summary": "Update logo",
        "parameters": [
          {
            "type": "boolean",
            "description": "Light mode logo (true) or dark mode logo (false)",
            "name": "light",
            "in": "query"
          },
          {
            "type": "file",
            "description": "Logo image file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "{\"error\": \"Invalid file\"}",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration/sync-ldap": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Manually trigger LDAP synchronization",
        "tags": ["Application Configuration"],
        "summary": "Synchronize LDAP",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/application-configuration/test-email": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Send a test email to verify email configuration",
        "tags": ["Application Configuration"],
        "summary": "Send test email",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "{\"error\": \"Unauthorized\"}",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "{\"error\": \"Forbidden\"}",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "{\"error\": \"error message\"}",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/audit-logs": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get a paginated list of audit logs for the current user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Audit Logs"],
        "summary": "List audit logs",
        "parameters": [
          {
            "type": "integer",
            "default": 1,
            "description": "Page number, starting from 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"created_at\"",
            "description": "Column to sort by",
            "name": "sort_column",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"desc\"",
            "description": "Sort direction (asc or desc)",
            "name": "sort_direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"data\\\": []dto.AuditLogDto, \\\"pagination\\\": utils.Pagination }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/custom-claims/suggestions": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get a list of suggested custom claim names",
        "produces": ["application/json"],
        "tags": ["Custom Claims"],
        "summary": "Get custom claim suggestions",
        "responses": {
          "200": {
            "description": "List of suggested custom claim names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/custom-claims/user-group/{userGroupId}": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update or create custom claims for a specific user group",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Custom Claims", "User Groups"],
        "summary": "Update custom claims for a user group",
        "parameters": [
          {
            "type": "string",
            "description": "User Group ID",
            "name": "userGroupId",
            "in": "path",
            "required": true
          },
          {
            "description": "List of custom claims to set for the user group",
            "name": "claims",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimCreateDto"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated custom claims",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
              }
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User group not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/custom-claims/user/{userId}": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update or create custom claims for a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Custom Claims", "Users"],
        "summary": "Update custom claims for a user",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "List of custom claims to set for the user",
            "name": "claims",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimCreateDto"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated custom claims",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
              }
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/authorization-required": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Check if the user needs to confirm authorization for the client",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Authentication"],
        "summary": "Check if authorization confirmation is required",
        "parameters": [
          {
            "description": "Authorization check parameters",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizationRequiredDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"authorizationRequired\\\": true/false }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/authorize": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Start the OIDC authorization process for a client",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Authentication"],
        "summary": "Authorize OIDC client",
        "parameters": [
          {
            "description": "Authorization request parameters",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientRequestDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authorization code and callback URL",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientResponseDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "User not authorized for client",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/clients": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get a paginated list of OIDC clients with optional search and sorting",
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients"],
        "summary": "List OIDC clients",
        "parameters": [
          {
            "type": "string",
            "description": "Search term to filter clients by name",
            "name": "search",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Page number, starting from 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"name\"",
            "description": "Column to sort by",
            "name": "sort_column",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"asc\"",
            "description": "Sort direction (asc or desc)",
            "name": "sort_direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"data\\\": []dto.OidcClientDto, \\\"pagination\\\": utils.Pagination }",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new OIDC client",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients"],
        "summary": "Create OIDC client",
        "parameters": [
          {
            "description": "Client information",
            "name": "client",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientCreateDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created client",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - client ID already exists",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/clients/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get detailed information about an OIDC client",
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients"],
        "summary": "Get OIDC client",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Client information",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing OIDC client",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients"],
        "summary": "Update OIDC client",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Client information",
            "name": "client",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated client",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete an OIDC client by ID",
        "tags": ["OIDC", "Clients"],
        "summary": "Delete OIDC client",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/clients/{id}/allowed-user-groups": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the user groups allowed to access an OIDC client",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients", "User Groups"],
        "summary": "Update allowed user groups",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User group IDs",
            "name": "groups",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcUpdateAllowedUserGroupsDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated client",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/clients/{id}/logo": {
      "get": {
        "description": "Get the logo image for an OIDC client",
        "produces": ["image/png", "image/jpeg", "image/svg+xml"],
        "tags": ["OIDC", "Clients"],
        "summary": "Get client logo",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Logo image",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Client or logo not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Upload or update the logo for an OIDC client",
        "consumes": ["multipart/form-data"],
        "tags": ["OIDC", "Clients"],
        "summary": "Update client logo",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "Logo image file (PNG, JPG, or SVG, max 2MB)",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request or invalid file",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "413": {
            "description": "File too large (max 2MB)",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete the logo for an OIDC client",
        "tags": ["OIDC", "Clients"],
        "summary": "Delete client logo",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client or logo not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/clients/{id}/meta": {
      "get": {
        "description": "Get OIDC client metadata for discovery and configuration",
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients"],
        "summary": "Get client metadata",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Client metadata",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientMetaDataDto"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/clients/{id}/secret": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Generate a new secret for an OIDC client",
        "produces": ["application/json"],
        "tags": ["OIDC", "Clients"],
        "summary": "Create client secret",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"secret\\\": \\\"string\\\" }",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Client not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/end-session": {
      "get": {
        "description": "End user session and handle OIDC logout",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["text/html"],
        "tags": ["OIDC", "Authentication"],
        "summary": "End OIDC session",
        "parameters": [
          {
            "type": "string",
            "description": "ID token",
            "name": "id_token_hint",
            "in": "query"
          },
          {
            "type": "string",
            "description": "URL to redirect to after logout",
            "name": "post_logout_redirect_uri",
            "in": "query"
          },
          {
            "type": "string",
            "description": "State parameter to include in the redirect",
            "name": "state",
            "in": "query"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to post-logout URL or application logout page"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "description": "End user session and handle OIDC logout using POST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["text/html"],
        "tags": ["OIDC", "Authentication"],
        "summary": "End OIDC session (POST method)",
        "parameters": [
          {
            "type": "string",
            "description": "ID token",
            "name": "id_token_hint",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "URL to redirect to after logout",
            "name": "post_logout_redirect_uri",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "State parameter to include in the redirect",
            "name": "state",
            "in": "formData"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to post-logout URL or application logout page"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/token": {
      "post": {
        "description": "Exchange authorization code for ID and access tokens",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Authentication"],
        "summary": "Create OIDC tokens",
        "parameters": [
          {
            "type": "string",
            "description": "Client ID (if not using Basic Auth)",
            "name": "client_id",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Client secret (if not using Basic Auth)",
            "name": "client_secret",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Authorization code",
            "name": "code",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Grant type (must be 'authorization_code')",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "PKCE code verifier",
            "name": "code_verifier",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"id_token\\\": \\\"string\\\", \\\"access_token\\\": \\\"string\\\", \\\"token_type\\\": \\\"Bearer\\\" }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request or invalid code",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Invalid client credentials",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/oidc/userinfo": {
      "get": {
        "security": [
          {
            "OAuth2AccessToken": []
          }
        ],
        "description": "Get user information based on the access token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Authentication"],
        "summary": "Get user information",
        "responses": {
          "200": {
            "description": "User claims based on requested scopes",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Missing access token",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Invalid access token",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "OAuth2AccessToken": []
          }
        ],
        "description": "Get user information based on the access token using POST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["OIDC", "Authentication"],
        "summary": "Get user information (POST method)",
        "responses": {
          "200": {
            "description": "User claims based on requested scopes",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Missing access token",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Invalid access token",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/one-time-access-email": {
      "post": {
        "description": "Send a one-time access link via email",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Request one-time access email",
        "parameters": [
          {
            "description": "Email and redirect options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessEmailDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Email not found",
            "schema": {
              "type": "object"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/one-time-access-token/setup": {
      "post": {
        "description": "Generate setup access token for initial admin user configuration",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication", "Setup"],
        "summary": "Setup initial admin",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Setup already complete",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/one-time-access-token/{token}": {
      "post": {
        "description": "Exchange a one-time access token for a session token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Exchange one-time access token",
        "parameters": [
          {
            "type": "string",
            "description": "One-time access token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Token not found",
            "schema": {
              "type": "object"
            }
          },
          "410": {
            "description": "Token expired",
            "schema": {
              "type": "object"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/user-groups": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get a paginated list of user groups with optional search and sorting",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User Groups"],
        "summary": "List user groups",
        "parameters": [
          {
            "type": "string",
            "description": "Search term to filter user groups by name",
            "name": "search",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Page number, starting from 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"name\"",
            "description": "Column to sort by",
            "name": "sort_column",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"asc\"",
            "description": "Sort direction (asc or desc)",
            "name": "sort_direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"data\\\": []dto.UserGroupDtoWithUserCount, \\\"pagination\\\": utils.Pagination }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new user group",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User Groups"],
        "summary": "Create user group",
        "parameters": [
          {
            "description": "User group information",
            "name": "userGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupCreateDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created user group",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - group name already exists",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/user-groups/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve detailed information about a specific user group including its users",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User Groups"],
        "summary": "Get user group by ID",
        "parameters": [
          {
            "type": "string",
            "description": "User Group ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User group not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing user group by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User Groups"],
        "summary": "Update user group",
        "parameters": [
          {
            "type": "string",
            "description": "User Group ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User group information",
            "name": "userGroup",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user group",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User group not found",
            "schema": {
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - group name already exists",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a specific user group by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User Groups"],
        "summary": "Delete user group",
        "parameters": [
          {
            "type": "string",
            "description": "User Group ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User group not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/user-groups/{id}/users": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the list of users belonging to a specific user group",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["User Groups"],
        "summary": "Update users in a group",
        "parameters": [
          {
            "type": "string",
            "description": "User Group ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "List of user IDs to assign to this group",
            "name": "users",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupUpdateUsersDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User group not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get a paginated list of users with optional search and sorting",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "List users",
        "parameters": [
          {
            "type": "string",
            "description": "Search term to filter users",
            "name": "search",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Page number, starting from 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"created_at\"",
            "description": "Column to sort by",
            "name": "sort_column",
            "in": "query"
          },
          {
            "type": "string",
            "default": "\"desc\"",
            "description": "Sort direction (asc or desc)",
            "name": "sort_direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "{ \\\"data\\\": []dto.UserDto, \\\"pagination\\\": utils.Pagination }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Create user",
        "parameters": [
          {
            "description": "User information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - email already exists",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve information about the currently authenticated user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get current user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the currently authenticated user's information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update current user",
        "parameters": [
          {
            "description": "User information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Account edit not allowed",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - email already exists",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/me/profile-picture": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the currently authenticated user's profile picture",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["Users", "Profile Picture"],
        "summary": "Update current user's profile picture",
        "parameters": [
          {
            "type": "file",
            "description": "Profile picture image file (PNG, JPG, or JPEG)",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request or invalid file format",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/me/profile-picture.png": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve the currently authenticated user's profile picture",
        "produces": ["image/png"],
        "tags": ["Users", "Profile Picture"],
        "summary": "Get current user's profile picture",
        "responses": {
          "200": {
            "description": "PNG image",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Profile picture not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve detailed information about a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Get user by ID",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing user by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Update user",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Bad request or validation error",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "409": {
            "description": "Conflict - email already exists",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a specific user by ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users"],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}/groups": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all groups a specific user belongs to",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users", "User Groups"],
        "summary": "Get user groups",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}/one-time-access-token": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Generate a one-time access token for a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication"],
        "summary": "Create one-time access token",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Token options",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessTokenCreateDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{ \\\"token\\\": \\\"string\\\" }",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}/profile-picture": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update a specific user's profile picture",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["Users", "Profile Picture"],
        "summary": "Update user profile picture",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "Profile picture image file (PNG, JPG, or JPEG)",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad request or invalid file format",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}/profile-picture.png": {
      "get": {
        "description": "Retrieve a specific user's profile picture",
        "produces": ["image/png"],
        "tags": ["Users", "Profile Picture"],
        "summary": "Get user profile picture",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PNG image",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User or profile picture not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/users/{id}/user-groups": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the groups a specific user belongs to",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Users", "User Groups"],
        "summary": "Update user groups",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User group IDs",
            "name": "groups",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserUpdateUserGroupDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyCreateDto": {
      "type": "object",
      "required": ["expiresAt", "name"],
      "properties": {
        "description": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 50,
          "minLength": 3
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyDto": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiresAt": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lastUsedAt": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyResponseDto": {
      "type": "object",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyDto"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigUpdateDto": {
      "type": "object",
      "required": [
        "allowOwnAccountEdit",
        "appName",
        "emailLoginNotificationEnabled",
        "emailOneTimeAccessEnabled",
        "emailsVerified",
        "ldapEnabled",
        "sessionDuration",
        "smtpTls"
      ],
      "properties": {
        "allowOwnAccountEdit": {
          "type": "string"
        },
        "appName": {
          "type": "string",
          "maxLength": 30,
          "minLength": 1
        },
        "emailLoginNotificationEnabled": {
          "type": "string"
        },
        "emailOneTimeAccessEnabled": {
          "type": "string"
        },
        "emailsVerified": {
          "type": "string"
        },
        "ldapAttributeAdminGroup": {
          "type": "string"
        },
        "ldapAttributeGroupMember": {
          "type": "string"
        },
        "ldapAttributeGroupName": {
          "type": "string"
        },
        "ldapAttributeGroupUniqueIdentifier": {
          "type": "string"
        },
        "ldapAttributeUserEmail": {
          "type": "string"
        },
        "ldapAttributeUserFirstName": {
          "type": "string"
        },
        "ldapAttributeUserLastName": {
          "type": "string"
        },
        "ldapAttributeUserProfilePicture": {
          "type": "string"
        },
        "ldapAttributeUserUniqueIdentifier": {
          "type": "string"
        },
        "ldapAttributeUserUsername": {
          "type": "string"
        },
        "ldapBase": {
          "type": "string"
        },
        "ldapBindDn": {
          "type": "string"
        },
        "ldapBindPassword": {
          "type": "string"
        },
        "ldapEnabled": {
          "type": "string"
        },
        "ldapSkipCertVerify": {
          "type": "string"
        },
        "ldapUrl": {
          "type": "string"
        },
        "ldapUserGroupSearchFilter": {
          "type": "string"
        },
        "ldapUserSearchFilter": {
          "type": "string"
        },
        "sessionDuration": {
          "type": "string"
        },
        "smtpFrom": {
          "type": "string"
        },
        "smtpHost": {
          "type": "string"
        },
        "smtpPassword": {
          "type": "string"
        },
        "smtpPort": {
          "type": "string"
        },
        "smtpSkipCertVerify": {
          "type": "string"
        },
        "smtpTls": {
          "type": "string",
          "enum": ["none", "starttls", "tls"]
        },
        "smtpUser": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigVariableDto": {
      "type": "object",
      "properties": {
        "isPublic": {
          "type": "boolean"
        },
        "key": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizationRequiredDto": {
      "type": "object",
      "required": ["clientID", "scope"],
      "properties": {
        "clientID": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientRequestDto": {
      "type": "object",
      "required": ["clientID", "scope"],
      "properties": {
        "callbackURL": {
          "type": "string"
        },
        "clientID": {
          "type": "string"
        },
        "codeChallenge": {
          "type": "string"
        },
        "codeChallengeMethod": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientResponseDto": {
      "type": "object",
      "properties": {
        "callbackURL": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimCreateDto": {
      "type": "object",
      "required": ["key", "value"],
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientCreateDto": {
      "type": "object",
      "required": ["callbackURLs", "name"],
      "properties": {
        "callbackURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isPublic": {
          "type": "boolean"
        },
        "logoutCallbackURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "maxLength": 50
        },
        "pkceEnabled": {
          "type": "boolean"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientDto": {
      "type": "object",
      "properties": {
        "callbackURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasLogo": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        },
        "logoutCallbackURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "pkceEnabled": {
          "type": "boolean"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientMetaDataDto": {
      "type": "object",
      "properties": {
        "hasLogo": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto": {
      "type": "object",
      "properties": {
        "allowedUserGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUserCount"
          }
        },
        "callbackURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hasLogo": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        },
        "logoutCallbackURLs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "pkceEnabled": {
          "type": "boolean"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OidcUpdateAllowedUserGroupsDto": {
      "type": "object",
      "required": ["userGroupIds"],
      "properties": {
        "userGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessEmailDto": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        },
        "redirectPath": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessTokenCreateDto": {
      "type": "object",
      "required": ["expiresAt", "userId"],
      "properties": {
        "expiresAt": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.PublicAppConfigVariableDto": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto": {
      "type": "object",
      "required": ["email", "firstName", "lastName", "username"],
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "isAdmin": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "username": {
          "type": "string",
          "maxLength": 50,
          "minLength": 2
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserDto": {
      "type": "object",
      "properties": {
        "customClaims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
          }
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "lastName": {
          "type": "string"
        },
        "ldapId": {
          "type": "string"
        },
        "userGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDto"
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupCreateDto": {
      "type": "object",
      "required": ["friendlyName", "name"],
      "properties": {
        "friendlyName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 2
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 2
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDto": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customClaims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
          }
        },
        "friendlyName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ldapId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUserCount": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customClaims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
          }
        },
        "friendlyName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ldapId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "userCount": {
          "type": "integer"
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "customClaims": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
          }
        },
        "friendlyName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ldapId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
          }
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupUpdateUsersDto": {
      "type": "object",
      "required": ["userIds"],
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "github_com_pocket-id_pocket-id_backend_internal_dto.UserUpdateUserGroupDto": {
      "type": "object",
      "required": ["userGroupIds"],
      "properties": {
        "userGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
