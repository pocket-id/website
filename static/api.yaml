definitions:
  github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyCreateDto:
    properties:
      description:
        type: string
      expiresAt:
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
      - expiresAt
      - name
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyDto:
    properties:
      createdAt:
        type: string
      description:
        type: string
      expiresAt:
        type: string
      id:
        type: string
      lastUsedAt:
        type: string
      name:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyResponseDto:
    properties:
      apiKey:
        $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyDto"
      token:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigUpdateDto:
    properties:
      allowOwnAccountEdit:
        type: string
      appName:
        maxLength: 30
        minLength: 1
        type: string
      emailLoginNotificationEnabled:
        type: string
      emailOneTimeAccessEnabled:
        type: string
      emailsVerified:
        type: string
      ldapAttributeAdminGroup:
        type: string
      ldapAttributeGroupMember:
        type: string
      ldapAttributeGroupName:
        type: string
      ldapAttributeGroupUniqueIdentifier:
        type: string
      ldapAttributeUserEmail:
        type: string
      ldapAttributeUserFirstName:
        type: string
      ldapAttributeUserLastName:
        type: string
      ldapAttributeUserProfilePicture:
        type: string
      ldapAttributeUserUniqueIdentifier:
        type: string
      ldapAttributeUserUsername:
        type: string
      ldapBase:
        type: string
      ldapBindDn:
        type: string
      ldapBindPassword:
        type: string
      ldapEnabled:
        type: string
      ldapSkipCertVerify:
        type: string
      ldapUrl:
        type: string
      ldapUserGroupSearchFilter:
        type: string
      ldapUserSearchFilter:
        type: string
      sessionDuration:
        type: string
      smtpFrom:
        type: string
      smtpHost:
        type: string
      smtpPassword:
        type: string
      smtpPort:
        type: string
      smtpSkipCertVerify:
        type: string
      smtpTls:
        enum:
          - none
          - starttls
          - tls
        type: string
      smtpUser:
        type: string
    required:
      - allowOwnAccountEdit
      - appName
      - emailLoginNotificationEnabled
      - emailOneTimeAccessEnabled
      - emailsVerified
      - ldapEnabled
      - sessionDuration
      - smtpTls
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigVariableDto:
    properties:
      isPublic:
        type: boolean
      key:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizationRequiredDto:
    properties:
      clientID:
        type: string
      scope:
        type: string
    required:
      - clientID
      - scope
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientRequestDto:
    properties:
      callbackURL:
        type: string
      clientID:
        type: string
      codeChallenge:
        type: string
      codeChallengeMethod:
        type: string
      nonce:
        type: string
      scope:
        type: string
    required:
      - clientID
      - scope
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientResponseDto:
    properties:
      callbackURL:
        type: string
      code:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimCreateDto:
    properties:
      key:
        type: string
      value:
        type: string
    required:
      - key
      - value
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientCreateDto:
    properties:
      callbackURLs:
        items:
          type: string
        type: array
      isPublic:
        type: boolean
      logoutCallbackURLs:
        items:
          type: string
        type: array
      name:
        maxLength: 50
        type: string
      pkceEnabled:
        type: boolean
    required:
      - callbackURLs
      - name
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientDto:
    properties:
      callbackURLs:
        items:
          type: string
        type: array
      hasLogo:
        type: boolean
      id:
        type: string
      isPublic:
        type: boolean
      logoutCallbackURLs:
        items:
          type: string
        type: array
      name:
        type: string
      pkceEnabled:
        type: boolean
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientMetaDataDto:
    properties:
      hasLogo:
        type: boolean
      id:
        type: string
      name:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto:
    properties:
      allowedUserGroups:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUserCount"
        type: array
      callbackURLs:
        items:
          type: string
        type: array
      hasLogo:
        type: boolean
      id:
        type: string
      isPublic:
        type: boolean
      logoutCallbackURLs:
        items:
          type: string
        type: array
      name:
        type: string
      pkceEnabled:
        type: boolean
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OidcUpdateAllowedUserGroupsDto:
    properties:
      userGroupIds:
        items:
          type: string
        type: array
    required:
      - userGroupIds
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessEmailDto:
    properties:
      email:
        type: string
      redirectPath:
        type: string
    required:
      - email
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessTokenCreateDto:
    properties:
      expiresAt:
        type: string
      userId:
        type: string
    required:
      - expiresAt
      - userId
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.PublicAppConfigVariableDto:
    properties:
      key:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto:
    properties:
      email:
        type: string
      firstName:
        maxLength: 50
        minLength: 1
        type: string
      isAdmin:
        type: boolean
      lastName:
        maxLength: 50
        minLength: 1
        type: string
      username:
        maxLength: 50
        minLength: 2
        type: string
    required:
      - email
      - firstName
      - lastName
      - username
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserDto:
    properties:
      customClaims:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
        type: array
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      isAdmin:
        type: boolean
      lastName:
        type: string
      ldapId:
        type: string
      userGroups:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDto"
        type: array
      username:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupCreateDto:
    properties:
      friendlyName:
        maxLength: 50
        minLength: 2
        type: string
      name:
        maxLength: 255
        minLength: 2
        type: string
    required:
      - friendlyName
      - name
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDto:
    properties:
      createdAt:
        type: string
      customClaims:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
        type: array
      friendlyName:
        type: string
      id:
        type: string
      ldapId:
        type: string
      name:
        type: string
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUserCount:
    properties:
      createdAt:
        type: string
      customClaims:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
        type: array
      friendlyName:
        type: string
      id:
        type: string
      ldapId:
        type: string
      name:
        type: string
      userCount:
        type: integer
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers:
    properties:
      createdAt:
        type: string
      customClaims:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
        type: array
      friendlyName:
        type: string
      id:
        type: string
      ldapId:
        type: string
      name:
        type: string
      users:
        items:
          $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        type: array
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupUpdateUsersDto:
    properties:
      userIds:
        items:
          type: string
        type: array
    required:
      - userIds
    type: object
  github_com_pocket-id_pocket-id_backend_internal_dto.UserUpdateUserGroupDto:
    properties:
      userGroupIds:
        items:
          type: string
        type: array
    required:
      - userGroupIds
    type: object
info:
  contact: {}
paths:
  /.well-known/jwks.json:
    get:
      description: Returns the JSON Web Key Set used for token verification
      produces:
        - application/json
      responses:
        "200":
          description: '{ \"keys\": []interface{} }'
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Get JSON Web Key Set (JWKS)
      tags:
        - OIDC Discovery
  /.well-known/openid-configuration:
    get:
      description:
        Returns the OpenID Connect discovery document with endpoints and
        capabilities
      produces:
        - application/json
      responses:
        "200":
          description: OpenID Connect configuration
          schema:
            type: object
      summary: Get OpenID Connect discovery configuration
      tags:
        - OIDC Discovery
  /api-keys:
    get:
      consumes:
        - application/json
      description: Get a paginated list of API keys belonging to the current user
      parameters:
        - default: 1
          description: Page number, starting from 1
          in: query
          name: page
          type: integer
        - default: 10
          description: Number of items per page
          in: query
          name: limit
          type: integer
        - default: '"created_at"'
          description: Column to sort by
          in: query
          name: sort_column
          type: string
        - default: '"desc"'
          description: Sort direction (asc or desc)
          in: query
          name: sort_direction
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            '{ \"data\": []dto.ApiKeyDto, \"pagination\": utils.Pagination
            }'
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: List API keys
      tags:
        - API Keys
    post:
      consumes:
        - application/json
      description: Create a new API key for the current user
      parameters:
        - description: API key information
          in: body
          name: api_key
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyCreateDto"
      produces:
        - application/json
      responses:
        "201":
          description: Created API key with token
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.ApiKeyResponseDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Create API key
      tags:
        - API Keys
  /api-keys/{id}:
    delete:
      consumes:
        - application/json
      description: Revoke (delete) an existing API key by ID
      parameters:
        - description: API Key ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden - Not owner of the API key
          schema:
            type: object
        "404":
          description: API key not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Revoke API key
      tags:
        - API Keys
  /application-configuration:
    get:
      consumes:
        - application/json
      description: Get all public application configurations
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.PublicAppConfigVariableDto"
            type: array
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      summary: List public application configurations
      tags:
        - Application Configuration
    put:
      consumes:
        - application/json
      description: Update application configuration settings
      parameters:
        - description: Application Configuration
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigUpdateDto"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigVariableDto"
            type: array
        "400":
          description: '{"error": "Validation error"}'
          schema:
            type: object
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update application configurations
      tags:
        - Application Configuration
  /application-configuration/all:
    get:
      consumes:
        - application/json
      description: Get all application configurations including private ones
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AppConfigVariableDto"
            type: array
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: List all application configurations
      tags:
        - Application Configuration
  /application-configuration/background-image:
    get:
      description: Get the background image for the application
      produces:
        - image/png
        - image/jpeg
      responses:
        "200":
          description: Background image
          schema:
            type: file
        "404":
          description: '{"error": "File not found"}'
          schema:
            type: object
      summary: Get background image
      tags:
        - Application Configuration
    put:
      consumes:
        - multipart/form-data
      description: Update the application background image
      parameters:
        - description: Background image file
          in: formData
          name: file
          required: true
          type: file
      responses:
        "204":
          description: No Content
        "400":
          description: '{"error": "Invalid file"}'
          schema:
            type: object
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update background image
      tags:
        - Application Configuration
  /application-configuration/favicon:
    get:
      description: Get the favicon for the application
      produces:
        - image/x-icon
      responses:
        "200":
          description: Favicon image
          schema:
            type: file
        "404":
          description: '{"error": "File not found"}'
          schema:
            type: object
      summary: Get favicon
      tags:
        - Application Configuration
    put:
      consumes:
        - multipart/form-data
      description: Update the application favicon
      parameters:
        - description: Favicon file (.ico)
          in: formData
          name: file
          required: true
          type: file
      responses:
        "204":
          description: No Content
        "400":
          description: '{"error": "Invalid file type, expected .ico"}'
          schema:
            type: object
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update favicon
      tags:
        - Application Configuration
  /application-configuration/logo:
    get:
      description: Get the logo image for the application
      parameters:
        - description: Light mode logo (true) or dark mode logo (false)
          in: query
          name: light
          type: boolean
      produces:
        - image/png
        - image/jpeg
        - image/svg+xml
      responses:
        "200":
          description: Logo image
          schema:
            type: file
        "404":
          description: '{"error": "File not found"}'
          schema:
            type: object
      summary: Get logo image
      tags:
        - Application Configuration
    put:
      consumes:
        - multipart/form-data
      description: Update the application logo
      parameters:
        - description: Light mode logo (true) or dark mode logo (false)
          in: query
          name: light
          type: boolean
        - description: Logo image file
          in: formData
          name: file
          required: true
          type: file
      responses:
        "204":
          description: No Content
        "400":
          description: '{"error": "Invalid file"}'
          schema:
            type: object
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update logo
      tags:
        - Application Configuration
  /application-configuration/sync-ldap:
    post:
      description: Manually trigger LDAP synchronization
      responses:
        "204":
          description: No Content
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Synchronize LDAP
      tags:
        - Application Configuration
  /application-configuration/test-email:
    post:
      description: Send a test email to verify email configuration
      responses:
        "204":
          description: No Content
        "401":
          description: '{"error": "Unauthorized"}'
          schema:
            type: object
        "403":
          description: '{"error": "Forbidden"}'
          schema:
            type: object
        "500":
          description: '{"error": "error message"}'
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Send test email
      tags:
        - Application Configuration
  /audit-logs:
    get:
      consumes:
        - application/json
      description: Get a paginated list of audit logs for the current user
      parameters:
        - default: 1
          description: Page number, starting from 1
          in: query
          name: page
          type: integer
        - default: 10
          description: Number of items per page
          in: query
          name: limit
          type: integer
        - default: '"created_at"'
          description: Column to sort by
          in: query
          name: sort_column
          type: string
        - default: '"desc"'
          description: Sort direction (asc or desc)
          in: query
          name: sort_direction
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            '{ \"data\": []dto.AuditLogDto, \"pagination\": utils.Pagination
            }'
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: List audit logs
      tags:
        - Audit Logs
  /custom-claims/suggestions:
    get:
      description: Get a list of suggested custom claim names
      produces:
        - application/json
      responses:
        "200":
          description: List of suggested custom claim names
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get custom claim suggestions
      tags:
        - Custom Claims
  /custom-claims/user-group/{userGroupId}:
    put:
      consumes:
        - application/json
      description: Update or create custom claims for a specific user group
      parameters:
        - description: User Group ID
          in: path
          name: userGroupId
          required: true
          type: string
        - description: List of custom claims to set for the user group
          in: body
          name: claims
          required: true
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimCreateDto"
            type: array
      produces:
        - application/json
      responses:
        "200":
          description: Updated custom claims
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
            type: array
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User group not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update custom claims for a user group
      tags:
        - Custom Claims
        - User Groups
  /custom-claims/user/{userId}:
    put:
      consumes:
        - application/json
      description: Update or create custom claims for a specific user
      parameters:
        - description: User ID
          in: path
          name: userId
          required: true
          type: string
        - description: List of custom claims to set for the user
          in: body
          name: claims
          required: true
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimCreateDto"
            type: array
      produces:
        - application/json
      responses:
        "200":
          description: Updated custom claims
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.CustomClaimDto"
            type: array
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update custom claims for a user
      tags:
        - Custom Claims
        - Users
  /oidc/authorization-required:
    post:
      consumes:
        - application/json
      description: Check if the user needs to confirm authorization for the client
      parameters:
        - description: Authorization check parameters
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizationRequiredDto"
      produces:
        - application/json
      responses:
        "200":
          description: '{ \"authorizationRequired\": true/false }'
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Check if authorization confirmation is required
      tags:
        - OIDC
        - Authentication
  /oidc/authorize:
    post:
      consumes:
        - application/json
      description: Start the OIDC authorization process for a client
      parameters:
        - description: Authorization request parameters
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientRequestDto"
      produces:
        - application/json
      responses:
        "200":
          description: Authorization code and callback URL
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.AuthorizeOidcClientResponseDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: User not authorized for client
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Authorize OIDC client
      tags:
        - OIDC
        - Authentication
  /oidc/clients:
    get:
      description: Get a paginated list of OIDC clients with optional search and sorting
      parameters:
        - description: Search term to filter clients by name
          in: query
          name: search
          type: string
        - default: 1
          description: Page number, starting from 1
          in: query
          name: page
          type: integer
        - default: 10
          description: Number of items per page
          in: query
          name: limit
          type: integer
        - default: '"name"'
          description: Column to sort by
          in: query
          name: sort_column
          type: string
        - default: '"asc"'
          description: Sort direction (asc or desc)
          in: query
          name: sort_direction
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            '{ \"data\": []dto.OidcClientDto, \"pagination\": utils.Pagination
            }'
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: List OIDC clients
      tags:
        - OIDC
        - Clients
    post:
      consumes:
        - application/json
      description: Create a new OIDC client
      parameters:
        - description: Client information
          in: body
          name: client
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientCreateDto"
      produces:
        - application/json
      responses:
        "201":
          description: Created client
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "409":
          description: Conflict - client ID already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Create OIDC client
      tags:
        - OIDC
        - Clients
  /oidc/clients/{id}:
    delete:
      description: Delete an OIDC client by ID
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Delete OIDC client
      tags:
        - OIDC
        - Clients
    get:
      description: Get detailed information about an OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Client information
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto"
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get OIDC client
      tags:
        - OIDC
        - Clients
    put:
      consumes:
        - application/json
      description: Update an existing OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
        - description: Client information
          in: body
          name: client
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientCreateDto"
      produces:
        - application/json
      responses:
        "200":
          description: Updated client
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientWithAllowedUserGroupsDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update OIDC client
      tags:
        - OIDC
        - Clients
  /oidc/clients/{id}/allowed-user-groups:
    put:
      consumes:
        - application/json
      description: Update the user groups allowed to access an OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
        - description: User group IDs
          in: body
          name: groups
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcUpdateAllowedUserGroupsDto"
      produces:
        - application/json
      responses:
        "200":
          description: Updated client
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientDto"
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update allowed user groups
      tags:
        - OIDC
        - Clients
        - User Groups
  /oidc/clients/{id}/logo:
    delete:
      description: Delete the logo for an OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client or logo not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Delete client logo
      tags:
        - OIDC
        - Clients
    get:
      description: Get the logo image for an OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - image/png
        - image/jpeg
        - image/svg+xml
      responses:
        "200":
          description: Logo image
          schema:
            type: file
        "404":
          description: Client or logo not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Get client logo
      tags:
        - OIDC
        - Clients
    post:
      consumes:
        - multipart/form-data
      description: Upload or update the logo for an OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
        - description: Logo image file (PNG, JPG, or SVG, max 2MB)
          in: formData
          name: file
          required: true
          type: file
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request or invalid file
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "413":
          description: File too large (max 2MB)
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update client logo
      tags:
        - OIDC
        - Clients
  /oidc/clients/{id}/meta:
    get:
      description: Get OIDC client metadata for discovery and configuration
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Client metadata
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OidcClientMetaDataDto"
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Get client metadata
      tags:
        - OIDC
        - Clients
  /oidc/clients/{id}/secret:
    post:
      description: Generate a new secret for an OIDC client
      parameters:
        - description: Client ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: '{ \"secret\": \"string\" }'
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Client not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Create client secret
      tags:
        - OIDC
        - Clients
  /oidc/end-session:
    get:
      consumes:
        - application/x-www-form-urlencoded
      description: End user session and handle OIDC logout
      parameters:
        - description: ID token
          in: query
          name: id_token_hint
          type: string
        - description: URL to redirect to after logout
          in: query
          name: post_logout_redirect_uri
          type: string
        - description: State parameter to include in the redirect
          in: query
          name: state
          type: string
      produces:
        - text/html
      responses:
        "302":
          description: Redirect to post-logout URL or application logout page
        "400":
          description: Bad request
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: End OIDC session
      tags:
        - OIDC
        - Authentication
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: End user session and handle OIDC logout using POST
      parameters:
        - description: ID token
          in: formData
          name: id_token_hint
          type: string
        - description: URL to redirect to after logout
          in: formData
          name: post_logout_redirect_uri
          type: string
        - description: State parameter to include in the redirect
          in: formData
          name: state
          type: string
      produces:
        - text/html
      responses:
        "302":
          description: Redirect to post-logout URL or application logout page
        "400":
          description: Bad request
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: End OIDC session (POST method)
      tags:
        - OIDC
        - Authentication
  /oidc/token:
    post:
      consumes:
        - application/x-www-form-urlencoded
      description: Exchange authorization code for ID and access tokens
      parameters:
        - description: Client ID (if not using Basic Auth)
          in: formData
          name: client_id
          type: string
        - description: Client secret (if not using Basic Auth)
          in: formData
          name: client_secret
          type: string
        - description: Authorization code
          in: formData
          name: code
          required: true
          type: string
        - description: Grant type (must be 'authorization_code')
          in: formData
          name: grant_type
          required: true
          type: string
        - description: PKCE code verifier
          in: formData
          name: code_verifier
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            '{ \"id_token\": \"string\", \"access_token\": \"string\",
            \"token_type\": \"Bearer\" }'
          schema:
            type: object
        "400":
          description: Bad request or invalid code
          schema:
            type: object
        "401":
          description: Invalid client credentials
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Create OIDC tokens
      tags:
        - OIDC
        - Authentication
  /oidc/userinfo:
    get:
      consumes:
        - application/json
      description: Get user information based on the access token
      produces:
        - application/json
      responses:
        "200":
          description: User claims based on requested scopes
          schema:
            type: object
        "400":
          description: Missing access token
          schema:
            type: object
        "401":
          description: Invalid access token
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - OAuth2AccessToken: []
      summary: Get user information
      tags:
        - OIDC
        - Authentication
    post:
      consumes:
        - application/json
      description: Get user information based on the access token using POST
      produces:
        - application/json
      responses:
        "200":
          description: User claims based on requested scopes
          schema:
            type: object
        "400":
          description: Missing access token
          schema:
            type: object
        "401":
          description: Invalid access token
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - OAuth2AccessToken: []
      summary: Get user information (POST method)
      tags:
        - OIDC
        - Authentication
  /one-time-access-email:
    post:
      consumes:
        - application/json
      description: Send a one-time access link via email
      parameters:
        - description: Email and redirect options
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessEmailDto"
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: object
        "404":
          description: Email not found
          schema:
            type: object
        "429":
          description: Too many requests
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Request one-time access email
      tags:
        - Authentication
  /one-time-access-token/{token}:
    post:
      consumes:
        - application/json
      description: Exchange a one-time access token for a session token
      parameters:
        - description: One-time access token
          in: path
          name: token
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Bad request
          schema:
            type: object
        "404":
          description: Token not found
          schema:
            type: object
        "410":
          description: Token expired
          schema:
            type: object
        "429":
          description: Too many requests
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Exchange one-time access token
      tags:
        - Authentication
  /one-time-access-token/setup:
    post:
      consumes:
        - application/json
      description: Generate setup access token for initial admin user configuration
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Setup already complete
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Setup initial admin
      tags:
        - Authentication
        - Setup
  /user-groups:
    get:
      consumes:
        - application/json
      description: Get a paginated list of user groups with optional search and sorting
      parameters:
        - description: Search term to filter user groups by name
          in: query
          name: search
          type: string
        - default: 1
          description: Page number, starting from 1
          in: query
          name: page
          type: integer
        - default: 10
          description: Number of items per page
          in: query
          name: limit
          type: integer
        - default: '"name"'
          description: Column to sort by
          in: query
          name: sort_column
          type: string
        - default: '"asc"'
          description: Sort direction (asc or desc)
          in: query
          name: sort_direction
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            '{ \"data\": []dto.UserGroupDtoWithUserCount, \"pagination\":
            utils.Pagination }'
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: List user groups
      tags:
        - User Groups
    post:
      consumes:
        - application/json
      description: Create a new user group
      parameters:
        - description: User group information
          in: body
          name: userGroup
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupCreateDto"
      produces:
        - application/json
      responses:
        "201":
          description: Created user group
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "409":
          description: Conflict - group name already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Create user group
      tags:
        - User Groups
  /user-groups/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a specific user group by ID
      parameters:
        - description: User Group ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User group not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Delete user group
      tags:
        - User Groups
    get:
      consumes:
        - application/json
      description:
        Retrieve detailed information about a specific user group including
        its users
      parameters:
        - description: User Group ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User group not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get user group by ID
      tags:
        - User Groups
    put:
      consumes:
        - application/json
      description: Update an existing user group by ID
      parameters:
        - description: User Group ID
          in: path
          name: id
          required: true
          type: string
        - description: User group information
          in: body
          name: userGroup
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupCreateDto"
      produces:
        - application/json
      responses:
        "200":
          description: Updated user group
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User group not found
          schema:
            type: object
        "409":
          description: Conflict - group name already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update user group
      tags:
        - User Groups
  /user-groups/{id}/users:
    put:
      consumes:
        - application/json
      description: Update the list of users belonging to a specific user group
      parameters:
        - description: User Group ID
          in: path
          name: id
          required: true
          type: string
        - description: List of user IDs to assign to this group
          in: body
          name: users
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupUpdateUsersDto"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User group not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update users in a group
      tags:
        - User Groups
  /users:
    get:
      consumes:
        - application/json
      description: Get a paginated list of users with optional search and sorting
      parameters:
        - description: Search term to filter users
          in: query
          name: search
          type: string
        - default: 1
          description: Page number, starting from 1
          in: query
          name: page
          type: integer
        - default: 10
          description: Number of items per page
          in: query
          name: limit
          type: integer
        - default: '"created_at"'
          description: Column to sort by
          in: query
          name: sort_column
          type: string
        - default: '"desc"'
          description: Sort direction (asc or desc)
          in: query
          name: sort_direction
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            '{ \"data\": []dto.UserDto, \"pagination\": utils.Pagination
            }'
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: List users
      tags:
        - Users
    post:
      consumes:
        - application/json
      description: Create a new user
      parameters:
        - description: User information
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto"
      produces:
        - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "409":
          description: Conflict - email already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Create user
      tags:
        - Users
  /users/{id}:
    delete:
      consumes:
        - application/json
      description: Delete a specific user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Delete user
      tags:
        - Users
    get:
      consumes:
        - application/json
      description: Retrieve detailed information about a specific user
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get user by ID
      tags:
        - Users
    put:
      consumes:
        - application/json
      description: Update an existing user by ID
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: User information
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "409":
          description: Conflict - email already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update user
      tags:
        - Users
  /users/{id}/groups:
    get:
      consumes:
        - application/json
      description: Retrieve all groups a specific user belongs to
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserGroupDtoWithUsers"
            type: array
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get user groups
      tags:
        - Users
        - User Groups
  /users/{id}/one-time-access-token:
    post:
      consumes:
        - application/json
      description: Generate a one-time access token for a specific user
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: Token options
          in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.OneTimeAccessTokenCreateDto"
      produces:
        - application/json
      responses:
        "201":
          description: '{ \"token\": \"string\" }'
          schema:
            type: object
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Create one-time access token
      tags:
        - Authentication
  /users/{id}/profile-picture:
    put:
      consumes:
        - multipart/form-data
      description: Update a specific user's profile picture
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: Profile picture image file (PNG, JPG, or JPEG)
          in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request or invalid file format
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update user profile picture
      tags:
        - Users
        - Profile Picture
  /users/{id}/profile-picture.png:
    get:
      description: Retrieve a specific user's profile picture
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - image/png
      responses:
        "200":
          description: PNG image
          schema:
            type: file
        "400":
          description: Bad request
          schema:
            type: object
        "404":
          description: User or profile picture not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Get user profile picture
      tags:
        - Users
        - Profile Picture
  /users/{id}/user-groups:
    put:
      consumes:
        - application/json
      description: Update the groups a specific user belongs to
      parameters:
        - description: User ID
          in: path
          name: id
          required: true
          type: string
        - description: User group IDs
          in: body
          name: groups
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserUpdateUserGroupDto"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Bad request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update user groups
      tags:
        - Users
        - User Groups
  /users/me:
    get:
      consumes:
        - application/json
      description: Retrieve information about the currently authenticated user
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get current user
      tags:
        - Users
    put:
      consumes:
        - application/json
      description: Update the currently authenticated user's information
      parameters:
        - description: User information
          in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserCreateDto"
      produces:
        - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/github_com_pocket-id_pocket-id_backend_internal_dto.UserDto"
        "400":
          description: Bad request or validation error
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Account edit not allowed
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "409":
          description: Conflict - email already exists
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update current user
      tags:
        - Users
  /users/me/profile-picture:
    put:
      consumes:
        - multipart/form-data
      description: Update the currently authenticated user's profile picture
      parameters:
        - description: Profile picture image file (PNG, JPG, or JPEG)
          in: formData
          name: file
          required: true
          type: file
      produces:
        - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request or invalid file format
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: User not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Update current user's profile picture
      tags:
        - Users
        - Profile Picture
  /users/me/profile-picture.png:
    get:
      description: Retrieve the currently authenticated user's profile picture
      produces:
        - image/png
      responses:
        "200":
          description: PNG image
          schema:
            type: file
        "401":
          description: Unauthorized
          schema:
            type: object
        "404":
          description: Profile picture not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
        - BearerAuth: []
      summary: Get current user's profile picture
      tags:
        - Users
        - Profile Picture
swagger: "2.0"
