// File: advanced/custom-keys

# Use custom private keys

By default, Pocket ID generates a RSA-2048 private key upon first startup, which is used to sign all tokens. You can optionally use a key with a different RSA key size (e.g. 3072 or 4096), or even a different algorithm (e.g. ECDSA with P-256, or EdDSA with Ed25519).

> **Important:** rotating/re-generating the private key will invalidate all tokens signed by Pocket ID.
>
> You will need to restart Pocket ID for the new key to be picked up. Additionally, you may need to restart all applications that consume tokens issued by Pocket ID.

Pocket ID include a command that can be used to generate a new key, which replaces the existing one and also allows rotating the private key:

```sh
pocket-id key-rotate
```

When running in a container, use a command similar to:

```sh
docker compose exec pocket-id /app/pocket-id key-rotate
```

You can specify the key algorithm using the `--alg / -a` flag. Supported values include:

- `RS256`: RSA (PKCS#1 v1.5) with a 2048-bit key and SHA-256 (default)
- `RS384`: RSA (PKCS#1 v1.5) with a 3072-bit key and SHA-384
- `RS512`: RSA (PKCS#1 v1.5) with a 4096-bit key and SHA-512
- `ES256`: ECDSA with curve P-256 and SHA-256
- `ES384`: ECDSA with curve P-384 and SHA-384
- `ES512`: ECDSA with curve P-521 and SHA-512
- `EdDSA`: EdDSA with the curve specified with the `--crv / -c` flag; supported values: `Ed25519`

For example:

```sh
# Generates an ES256 token signing key
pocket-id key-rotate --alg ES256

# Generates an EdDSA token signing key with Ed25519
pocket-id key-rotate --alg EdDSA --crv Ed25519
```

> Note that the private key is used for all OAuth2 clients. If choosing an algorithm different than RS256 (RSA), make sure that your clients support that.

---

// File: advanced/hardening

# Container security hardening

By default, the Pocket ID container starts as the root user, which is used to set permissions on the file system before dropping its privileges and starting the main process. This is done for convenience, while still running the Pocket ID binary as non-root.

If you prefer, you can run the Pocket ID container as a **non-root** user entirely and even ensure it uses a **read-only root file system**.

### Prerequisites

Make sure that the Pocket ID data volume is writable by the chosen user. This is the volume/folder mounted in the container at `/app/data`.

For example, if running the container as user `1000` and group `1000`, use a command similar to this to change the owner of the data folder:

```sh
# Set the owner to user 1000 and group 1000
chown -R 1000:1000 ./data
# Set permissions on all folders to 0700
find ./data -type d -exec chmod 0700 {} \;
# Set permissions on all files to 0600
find ./data -type f -exec chmod 0600 {} \;
```

> Alternatively, you can start up the Pocket ID container with the default configuration once (where it starts as root before dropping privileges), and it will create the directories and set permissions automatically.

### Container configuration

To run the container as non-root and with a read-only root file system, use one of the options below.

- **Docker CLI**: Add the `--user 1000:1000 --read-only` flags to the `docker run` command.
- **Docker Compose**: Set these options in the `pocket-id` service:

   - `read_only: true`
   - `user: "1000:1000"`

   Example:

   ```yaml
   services:
     pocket-id:
       # ...
       read_only: true
       user: "1000:1000"
   ```

---

// File: advanced/nginx-reverse-proxy

# Use Nginx as Reverse Proxy

To use Nginx as a reverse proxy for Pocket ID, update the configuration to increase the header buffer size. This adjustment is necessary because SvelteKit generates larger headers, which may exceed the default buffer limits.

```conf
proxy_busy_buffers_size   512k;
proxy_buffers   4 512k;
proxy_buffer_size   256k;
```

---

// File: client-examples/actual

# Actual Budget

## Requirements

- [Actual Budget](https://actualbudget.org/docs/experimental/oauth-auth) Client and Server version `25.1.0` or higher
- HTTPS connection to your Actual server

**NOTE:** At the time of writing, OpenID support in Actual is considered experimental.

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `actual`).
2. Set the **Callback URL** to the value below:
    ```
    https://<actual-domain.tld>/openid/callback
    ```
3. *Optional:* Download a PNG or SVG **logo** from the [Actual project](https://github.com/actualbudget/actual) and upload.
4. Copy the **Client ID**, **Client Secret**, and **OIDC Discovery URL** for use in the next section.

## Configure Actual using the UI
1. Open Actual, open a file, and navigate to:
   **`Settings > Advanced > Experimental > Authentication method`**
2. Click **Start using OpenID**.
3. Fill in the required fields:
   - **OpenID Provider**: Choose `Other`
   - **Provider URL**: Paste either your base `Pocket URL` or `OIDC Discovery URL` from Pocket ID.
   - **Client ID**: Paste the `Client ID` from Pocket ID.
   - **Client Secret**: Paste the `Client Secret` from Pocket ID.
5. Click **OK** and you will be redirected to the login page.
6. Provide your existing file password, and test OpenID login. The first successful login will become the administrator.

## Managing multi-users

After setting up the integration, you can manage users in Actual by following [these instructions](https://www.actualbudget.com/docs/experimental/multi-user).

## Configure Actual with other methods
You can also configure OpenID via the following methods. Check out Actual's documentation for more information.

- [Environment variables](https://actualbudget.org/docs/experimental/oauth-auth/#configuration-using-environment-variables)
- [Configuration file](https://actualbudget.org/docs/experimental/oauth-auth/#configuration-using-a-configuration-file)


**Example with `.env`:**
```
ACTUAL_OPENID_DISCOVERY_URL=https://<pocket-id-domain.tld>
ACTUAL_OPENID_CLIENT_ID=xxxxx-xxxxx-xxxxx
ACTUAL_OPENID_CLIENT_SECRET=xxxxx-xxxxx-xxxxx
```

**Example with `config.json`:**
```json
"openId": {
        "discoveryURL": "URL for the OpenID Provider",
        "client_id": "client_id given by the provider",
        "client_secret": "client_secret given by the provider",
        "server_hostname": "your Actual Server URL (so the provider redirects you to this)",
        "authMethod": "openid" // or "oauth2"
    }
```

---

// File: client-examples/audiobookshelf

# Audiobookshelf
The following example variables are used, and should be replaced with your actual URLs.

- `audiobookshelf.example.com` (The URL of your Audiobookshelf instance.)
- `id.example.com` (The URL of your Pocket ID instance.)

## Pocket-ID setup
1. In Pocket-ID create a new OIDC Client, name it, for example `audiobookshelf`
2. Set a logo for this OIDC Client if you would like to.
3. Set the callback URLs to: `https://audiobookshelf.example.com/auth/openid/callback` and add another one, for the mobile app to `https://audiobookshelf.example.com/auth/openid/mobile-redirect`.
4. Copy the `Client ID` and `Client Secret` for use in the next steps.

## Audiobookshelf setup
1. Log in to Audiobookshelf as an admin.
2. Go to **Settings → Authentication** check the checkbox for **OpenID Connect Authentication**
3. In the field **Issuer URL** put `id.example.com` and click on **Auto-Populate**, this should automatically populate all the other URL fields.
4. Enter the **Client ID**.
5. Enter the **Client Secret**.
6. Change the **Subfolder for Redirect URLs** according to how you configured Audiobookshelf. In this example change it to **None**, if you are using a dedicated subdomain for it.
7. Change **Match existing users by**, to what you want it to match an OIDC user with an existing (Audiobookshelf) user by.
8. Toggle **Auto Register** to true, if you want to create a new user if it does not exist.
9. Configure the **group claim** if you want.
    :::danger
    If you configure **group claim**, you will not be able to sign in as user. If you're not part of admin, user or guest.
    :::
10. Configure the **abspermissions** claim if you want.
   
    :::danger 
    If you configure **abspermissions**, you will not be able to sign in as a normal user. If your configuration for it is not valid or not configured.
    :::

### Group Claim
If you want to automatically assign permissions based on group membership.
#### Audiobooshelf
Set the **Group Claim** under **Settings → Authentication → OpenID Connect Authentication → Group Claim** to `groups`.
#### Pocket-ID
Create a group `admin`, `user` or `guest` via **User Groups → Add Group**. Add the users depending on what permissions you want them to have to the groups.
### Advanced Permission Claim
#### Audiobookshelf
Set the **Advanced permission Claim** under **Settings → Authentication → OpenID Connect Authentication → Advanced Permission Claim** to `abspermissions`.
#### Pocket-ID
1. Create a custom claim for the group `yourgroupname` under **User Groups → Manage User Groups → `yourgroupname` → ... → Edit → Custom Claims → + Add custom claim**.
2. Set Key to `abspermissions`
3. set value to a valid JSON like this:
```json
{
  "canDownload": true,
  "canAccessAllLibraries": true,
  "canAccessAllTags": true,
  "tagsAreDenylist": false
}
```
#### Little explanation of the abspermissions:
```
{
  "canDownload": false, //Allows a user to download content
  "canUpload": false,   //Allows a user to Upload content
  "canDelete": false,   //Allows a user to delete content
  "canUpdate": false,   
  "canAccessExplicitContent": false,  //Allow access to explicit content
  "canAccessAllLibraries": false,     //Allow access to all Libraries (only set to true if nothing is specified below)
  "canAccessAllTags": false,          //Allow access to all tags (only set to true if nothing is specified below)
  "canCreateEReader": false,          
  "tagsAreDenylist": false,           //Invert the allowed tags list to a deny list
  "allowedLibraries": [   //Specify which libraries are allowed to be accessed via the library ID
    "5406ba8a-16e1-451d-96d7-4931b0a0d966", //You can get this ID via the Audiobookshelf api
    "918fd848-7c1d-4a02-818a-847435a879ca"  //https://audiobookshelf.example.com/api/libraries
  ],
  "allowedTags": [ //Specify which tags are allowed (or denied) 
    "Romance",
    "Fantasy",
    "ThirdTag"
  ]
}
```
## Sources
- https://www.audiobookshelf.org/guides/oidc_authentication
- https://www.audiobookshelf.org/guides/users#access-control
- https://api.audiobookshelf.org/#libraries

---

// File: client-examples/beszel

# Beszel

## Requirements

- [Beszel server](https://www.beszel.dev/guide/oauth)
- HTTPS connection to your Beszel server

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `beszel`).
2. Set the **Callback URL** to the value below.
    ```
    https://<your-beszel-url>/api/oauth2-redirect
    ```
3. *Optional:* Download a PNG or SVG **logo** from the [Beszel project](https://github.com/henrygd/beszel) and upload.
4. Copy the **Client ID**, **Client Secret**, and **Authorization URL**, **Token URL**, and **Userinfo URL** for use in the next section.

## Configure Pocket ID
1. Open the Pocket ID settings page and navigate to **`Application Configuration`**.
2. Enable **Emails Verified**.

> **ℹ️ Note:**  
> Beszel requires the OAuth provider to return a valid, verified email address to create new users.  
> If you see an error like:  
> `Failed to create record. { "email": "cannot be blank" }`  
> It means your OAuth provider is not returning a usable email.  
> Make sure **"Emails Verified"** is enabled in Pocket ID or that your identity provider returns a verified email in its `userinfo` response.

## Configure Beszel

1. Open the Beszel superuser interface (`/_/#settings`) and navigate to: **`Settings > Application`** 
2. Disable the **`Hide collection create and edit controls`** setting.
3. Navigate to **`Collections > Users`**.
4. Modify the `users` collection using the gear icon near the title.
5. Navigate to **`Options > OAuth2`**.
6. Enable the **Active** checkmark, and click **`Add provider`**
7. Fill in the required fields with values from Pocket ID:
   - **Client ID**
   - **Client Secret**
   - **Display Name** of your choice (i.e.: `Pocket`)
   - **Auth URL**
   - **Token URL**
   - Set **Fetch user info from** to **`User info URL`**.
   - Leave **`Support PKCE`** enabled.
8. Save the settings.
9. Re-enable **`Hide collection create and edit controls`** from step 2.
10. Test the OAuth login to ensure it works.

### Disable password login 

To disable password login, set `DISABLE_PASSWORD_AUTH=true` in the hub environment variables. Changing in the UI alone will see the value overwritten on next restart.

### Automatic user creation 

Beszel does not allow automatic user creation by default. To enable it, set `USER_CREATION=true` in the hub environment variables.

## Sources

[Beszel Configuration Guide](https://www.beszel.dev/guide/oauth)

---

// File: client-examples/bookstack

# BookStack

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client (example: `bookstack`).
2. Set the Callback URL to `https://<bookstack-url>/oidc/callback`
3. Enable **PKCE** for improved security.
4. Copy the generated **Client ID** and **Client Secret** values for next steps.

## BookStack Docker Setup

Refer to the BookStack [documentation](https://www.bookstackapp.com/docs/admin/oidc-auth/) for more information if needed.

Add the following variables to your BookStack container `.env` file and restart:

```
AUTH_METHOD=oidc
AUTH_AUTO_INITIATE=true
OIDC_NAME="Pocket ID"
OIDC_DISPLAY_NAME_CLAIMS=name
OIDC_CLIENT_ID=<Client ID from Pocket ID>
OIDC_CLIENT_SECRET=<Client Secret from Pocket ID>
OIDC_ISSUER=https://<pocket-id-domain>
OIDC_END_SESSION_ENDPOINT=true
OIDC_ISSUER_DISCOVER=true
````

### Group synchronization

BookStack also has the ability to sync OIDC user groups with BookStack roles. By default BookStack will match OIDC groups (Pocket ID groups), with the BookStack role display names, with casing ignored.

This feature requires the OIDC server to provide a claim in the ID token with an array of group names. 

1. Setup new **Roles** (or rename existing ones) in BookStack. Example:
    - BookStack_Admin 
    - BookStack_Editor 
    - BookStack_Viewer

2. Create matching groups in Pocket ID:
    - BookStack Admin (`bookstack_admin`)
    - BookStack Editor (`bookstack_editor`)
    - BookStack Viewer (`bookstack_viewer`)    

3. Add the following lines to your BookStack container `.env` and restart:

    ````
    OIDC_USER_TO_GROUPS=true
    OIDC_GROUPS_CLAIM=groups
    OIDC_ADDITIONAL_SCOPES=groups
    OIDC_REMOVE_FROM_GROUPS=true
    ````

---

// File: client-examples/cloudflare-zero-trust

# Cloudflare Zero Trust

**Note: Cloudflare will need to be able to reach your Pocket ID instance and vice versa for this to work correctly**

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `Cloudflare Zero Trust`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://<your-team-name>.cloudflareaccess.com/cdn-cgi/access/callback`.
4. Copy the Client ID, Client Secret, Authorization URL, Token URL, and Certificate URL for the next steps.

## Cloudflare Zero Trust Setup

1. Login to Cloudflare Zero Trust [Dashboard](https://one.dash.cloudflare.com/).
2. Navigate to Settings > Authentication > Login Methods.
3. Click `Add New` under login methods.
4. Create a name for the new login method.
5. Paste in the `Client ID` from Pocket ID into the `App ID` field.
6. Paste the `Client Secret` from Pocket ID into the `Client Secret` field.
7. Paste the `Authorization URL` from Pocket ID into the `Auth URL` field.
8. Paste the `Token URL` from Pocket ID into the `Token URL` field.
9. Paste the `Certificate URL` from Pocket ID into the `Certificate URL` field.
10. Save the new login method and test to make sure it works with cloudflare.

---

// File: client-examples/donetick

# Donetick

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it. e.g. `donetick`.
2. Set a logo for this OIDC Client if you would like too. The official logo is located [here](https://github.com/donetick/donetick/blob/main/assets/icon.png).
3. Set the callback URL to: `https://<your-app-and-domain-name>/auth/oauth2` e.g. `https://donetick.example.com/auth/oauth2`.
4. Copy the Client ID, Client Secret, Authorization URL, Token URL, etc... for the next steps.

## Donetick Setup

In the configuration file called `selfhosted.yaml` in the documentation, fill the oauth fields with:
```yaml
oauth2:
  client_id: <pocket-client-id>
  client_secret: <pocket-client-secret>
  auth_url: <pocket-authorization-url>
  token_url: <pocket-token-url>
  user_info_url: <pocket-userinfo-url>
  redirect_url: <pocket-callback-url>
  name: PocketID
```
Restart your donetick docker and your good to go!

---

// File: client-examples/filebrowser-quantum

# FileBrowser Quantum

## Requirements

- [FileBrowser Quantum](https://github.com/gtsteffaniak/filebrowser/wiki/Configuration-And-Examples#openid-connect-configuration-oidc) with [SSO](https://github.com/gtsteffaniak/filebrowser/issues/816#issuecomment-2993195649)
- HTTPS connection to your Pocket ID server

## Pocket ID Setup 

To setup Pocket ID:

- Create a new **OIDC Client** 
- Copy the **Client ID** and **Client Secret** for section below

To limit access to specific group(s):

- Create a new **User Group** (`filebrowser`), link it to the OIDC client, and add users

To grant admin privileges based on group:

- Create a second **User Group** (`filebrowser_admin`), add users, and copy the group name for section below

## FileBrowser Quantum Setup 

Add the following to your `config.yaml`, replacing values where applicable:

```yaml 
auth:
methods:
    oidc:
    enabled: true
    clientId: << Client ID >>
    clientSecret: << Client Secret >>
    issuerUrl: https://id.example.com
    scopes: email openid profile groups
    userIdentifier: preferred_username
    disableVerifyTLS: false
    createUser: true
    # Below is optional. Also add 'groups' to 'scopes' if using this
    adminGroup: filebrowser_admin
```

If you want to disable local password authentication you can also add:

```yaml
auth:
  methods:
    password:
      enabled: false 
```

---

// File: client-examples/forgejo

# Forgejo

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client named `Forgejo` (or any name you prefer).  
2. (Optional) Set a logo for the OIDC client.  
3. Set the callback URL to: `https://<Forgejo Host>/user/oauth2/PocketID/callback`  
4. Copy the `Client ID`, `Client Secret`, and `OIDC Discovery URL` for the next steps.  

## Forgejo Setup

1. Log in to Forgejo as an admin.  
2. Go to **Site Administration → Identity & Access → Authentication Sources**.  
3. Click **Add Authentication Source**.  
4. Set **Authentication Type** to `OAuth2`.  
5. Set **Authentication Name** to `PocketID`.  
   :::important  
   If you change this name, update the callback URL in Pocket ID to match.  
   :::  
6. Set **OAuth2 Provider** to `OpenID Connect`.  
7. Enter the `Client ID` into the **Client ID (Key)** field.  
8. Enter the `Client Secret` into the **Client Secret** field.  
9. Enter the `OIDC Discovery URL` into the **OpenID Connect Auto Discovery URL** field.  
10. Enable **Skip local 2FA**.  
11. Set **Additional Scopes** to `openid email profile`.  
12. Save the settings and test the OAuth login.

---

// File: client-examples/freescout

# FreeScout

## Requirements

- [FreeScout OAuth Social Login Module](https://freescout.net/module/oauth-login/) (one-time fee)
- HTTPS connection to your FreeScout server

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `freescout`).
2. Set the **Callback URL** to the value below. After creating the OAuth provider (in the next section), update this to the generated **Redirect URI** from FreeScout:
    ```
    https://<FREESCOUT-DOMAIN>/oauth-login/callback/*
    ```
3. *Optional:* Download a PNG or SVG **logo** from the [FreeScout project](https://github.com/freescout-help-desk/freescout/tree/dist/public/img) and upload.
4. Copy the **Client ID**, **Client Secret**, and **OIDC Discovery URL** for use in the next section.

## Configure FreeScout
1. Open FreeScout and navigate to:
   **`Manage > Settings > OAuth`**
2. Enable the **Active** checkmark.
3. Fill in the required fields:
   - **Provider**: Choose `Custom Oauth Provider`
   - **Name**: Type in `Pocket ID` or similar.
   - **Redirect URI**: Copy and paste this to the **Callback URLs** field in Pocket ID (from first section).
   - **Logout URI**: Leave the generated value provided by FreeScout.
   - **Client ID**: Paste the `Client ID` from Pocket ID.
   - **Client Secret**: Paste the `Client Secret` from Pocket ID.
   - **Authorization URL**: Paste the `Authorization URL` from Pocket ID.
   - **Token URL**: Paste the `Token URL` from Pocket ID.
   - **User Info URL**: Paste the `Userinfo URL` from Pocket ID.
   - **User Info Method**: Choose `POST`.
   - **Proxy URL, Field Mappings, Scopes**: Leave blank (unless otherwise necessary for your environment).
5. Save the settings.
6. Test the OAuth login to ensure it works.

### Optional Config

- If desired, enable the **Auto-Create Users** option, to auto create non-existing users in FreeScout from Pocket ID.

- If desired, enable the **Force OAuth Login** option, to force using Pocket ID. Do not enable this until fully tested. To disable review the [module documentation](https://freescout.net/module/oauth-login/).

- Enabling **Debug Mode** is useful for examining the OAuth transaction in the FreeScout logs. You can disable when tested.

---

// File: client-examples/freshrss

# FreshRSS

The following example variables are used, and should be replaced with your actual URLs.

- `freshrss.example.com` (The URL of your FreshRSS instance.)
- `id.example.com` (The URL of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID create a new OIDC Client, name it, for example, `FreshRSS`.
2. Set a logo for this OIDC Client if you would like to.
3. Set the callback URL to: `https://freshrss.example.com/i/oidc/`.
4. Copy the `Client ID`, `Client Secret`, and `OIDC Discovery URL` for use in the next steps.

## FreshRSS Setup

See [FreshRSS’ OpenID Connect documentation](https://freshrss.github.io/FreshRSS/en/admins/16_OpenID-Connect.html) for specific FreshRSS OIDC settings.

This is an example docker-compose file for FreshRSS with OIDC enabled.

```yaml
services:
  freshrss:
    image: freshrss/freshrss:1.25.0
    container_name: freshrss
    ports:
      - 8080:80
    volumes:
      - /freshrss_data:/var/www/FreshRSS/data
      - /freshrss_extensions:/var/www/FreshRSS/extensions
    environment:
      CRON_MIN: 1,31
      TZ: Etc/UTC
      OIDC_ENABLED: 1
      OIDC_CLIENT_ID: <POCKET_ID_CLIENT_ID>
      OIDC_CLIENT_SECRET: <POCKET_ID_SECRET>
      OIDC_PROVIDER_METADATA_URL: https://id.example.com/.well-known/openid-configuration
      OIDC_SCOPES: openid email profile
      OIDC_X_FORWARDED_HEADERS: X-Forwarded-Proto X-Forwarded-Host
      OIDC_REMOTE_USER_CLAIM: preferred_username
    restart: unless-stopped
    networks:
      - freshrss
networks:
  freshrss:
    name: freshrss
```

:::important
The Username used in Pocket ID must match the Username used in FreshRSS **exactly**. This also applies to case sensitivity. As of version `0.24` of Pocket ID all Usernames are required to be entirely lowercase. FreshRSS allows for uppercase. If a Pocket ID Username is `amanda` and your FreshRSS Username is `Amanda`, you will get a 403 error in FreshRSS and be unable to login. As of version `1.25` of FreshRSS, you are unable to change your username in the GUI. To change your FreshRSS username to lowercase or to match your Pocket ID username, you must navigate to your FreshRSS volume location. Go to `data/users/` and change the folder for your user to the matching username in Pocket ID, then restart the FreshRSS container to apply the changes.
:::

## Complete OIDC Setup

If you are setting up a new instance of FreshRSS, simply start the container with the OIDC variables and navigate to your FreshRSS URL.

If you are adding OIDC to an existing FreshRSS instance, recreate the container with the docker-compose file with the OIDC variables in it and navigate to your FreshRSS URL. Go to `Settings > Authentication` and change the Authentication method to **HTTP** and hit Submit. Logout to test your OIDC connection.

If you have an error with Pocket ID or are unable to login to your FreshRSS account, you can revert to password login by editing your `config.php` file for FreshRSS. Find the value for `auth_type` and change from `http_auth` to `form`. Restart the FreshRSS container to revert to password login.

---

// File: client-examples/gitea

# Gitea

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client named `Gitea` (or any name you prefer).  
2. (Optional) Set a logo for the OIDC client.  
3. Set the callback URL to: `https://<Gitea Host>/user/oauth2/PocketID/callback`  
4. Copy the `Client ID`, `Client Secret`, and `OIDC Discovery URL` for the next steps.  

## Gitea Setup

1. Log in to Gitea as an admin.  
2. Go to **Site Administration → Identity & Access → Authentication Sources**.  
3. Click **Add Authentication Source**.  
4. Set **Authentication Type** to `OAuth2`.  
5. Set **Authentication Name** to `PocketID`.  
   :::important  
   If you change this name, update the callback URL in Pocket ID to match.  
   :::  
6. Set **OAuth2 Provider** to `OpenID Connect`.  
7. Enter the `Client ID` into the **Client ID (Key)** field.  
8. Enter the `Client Secret` into the **Client Secret** field.  
9. Enter the `OIDC Discovery URL` into the **OpenID Connect Auto Discovery URL** field.  
10. Enable **Skip local 2FA**.  
11. Set **Additional Scopes** to `openid email profile`.  
12. Save the settings and test the OAuth login.

---

// File: client-examples/grafana

# Grafana

Below URLs are used as placeholders for the Grafana and Pocket ID instances. Replace them with the actual URLs.

- grafana.example.com (The url of your Grafana instance.)
- pocketid.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client named `grafana` (or any name you prefer).  
2. (Optional) Set a logo for the OIDC client.  
3. Set the callback URL to: `https://grafana.example.com/login/generic_oauth`  
4. Copy the `Client ID`, `Client Secret`, `Authorization URL` and `Token URL` for the next steps.

## Grafana App Setup

1. Login to Grafana as the admin user.
2. Go to **Administration** -> **Authentication** and select **Generic OAuth**.
3. Enter the values for the fields as given below in the **General Settings**:
   - `Display Name` as 'Pocket ID' or something similar.
   - `Client Id` as the `Client ID` from above.
   - `Client secret` as the `Client Secret` from above.
   - `Auth style` as 'Auto Detect'.
   - `Scopes` as 'openid', 'email' and 'profile'.
   - `Auth URL` as `Authorization URL` from above.
   - `Token URL` as `Token URL` from above.
   - Leave `API URL` and `Sign out redirect URL` as empty.
   - Leave `Allow sign up` and `Auto login` as disabled.
4. Under **User mapping**:
   - Only set `Email attribute name` as 'email:primary' and leave all other fields as empty.
   - Only enable `Skip organization role sync` and other toggles as disabled.
5. Nothing to be done under **Extra security measures**.
6. Save the settings.
7. Next create a new admin user or update the existing admin user under the **Users** settings to have the same email address as your user in **Pocket-ID**. Also set the username to the same email id.
8. Logout and test the OAuth based login.

## Common problems

- In case you get locked out of your account before the OAuth setup is completed successfully and need to reset the password refer this [link](https://grafana.com/docs/grafana/latest/cli/#reset-admin-password).
- In case login fails with information that the callback url is wrong and you are behind reverse-proxy, you might need to set `root_url` in the grafana.ini to use properly set `https`, for example: `https://grafana.example.com/`.
- In case everything is set as according to the steps described above and you are still getting `Login failed: Sign up is disabled`, you might need to set `oauth_allow_insecure_email_lookup=true` in the `[auth]` section in the grafana.ini file.

---

// File: client-examples/grist

# Grist

## Pocket ID Setup
1. In Pocket-ID create a new OIDC Client, name it i.e. `Grist`
2. Set the callback url to: `https://<Grist Host>/oauth2/callback`
3. In Grist (Docker/Docker Compose/etc), set these environment variables:

```ini
GRIST_OIDC_IDP_ISSUER="https://<Pocket ID Host>/.well-known/openid-configuration"
GRIST_OIDC_IDP_CLIENT_ID="<Client ID from the OIDC Client created in Pocket ID>"
GRIST_OIDC_IDP_CLIENT_SECRET="<Client Secret from the OIDC Client created in Pocket ID>"
GRIST_OIDC_SP_HOST="https://<Grist Host>"
GRIST_OIDC_IDP_SCOPES="openid email profile"  # Default
GRIST_OIDC_IDP_SKIP_END_SESSION_ENDPOINT=true  # Default=false, needs to be true for Pocket Id b/c end_session_endpoint is not implemented
GRIST_OIDC_IDP_END_SESSION_ENDPOINT="https://<Pocket ID Host>/api/webauthn/logout" # Only set this if GRIST_OIDC_IDP_SKIP_END_SESSION_ENDPOINT=false and you need to define a custom endpoint
```
4. Also ensure that the `GRIST_DEFAULT_EMAIL` env variable is set to the same email address as your user profile within Pocket ID
5. Start/Restart Grist

---

// File: client-examples/headscale

# Headscale

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `Headscale`).
2. Set the callback URL:  `https://<HEADSCALE-DOMAIN>/oidc/callback`
3. Enable `PKCE`.
4. Copy the **Client ID** and **Client Secret**.

## Configure Headscale
> Refer to the example [`config.yaml`](https://github.com/juanfont/headscale/blob/main/config-example.yaml) for full OIDC configuration options.

Add the following to `config.yaml`:

```yaml
oidc:
  issuer: "https://<POCKET-ID-DOMAIN>"
  client_id: "<CLIENT-ID>"
  client_secret: "<CLIENT-SECRET>"
  pkce:
    enabled: true
    method: S256
```

### (Optional) Restrict Access to Certain Groups
To allow only specific groups, add:

```yaml
  scope: ["openid", "profile", "email", "groups"]
  allowed_groups:
    - <POCKET-ID-GROUP-NAME> #example: headscale 
```

---

// File: client-examples/healthchecks

# Healthchecks

## Requirements

- [Healthchecks.io](https://healthchecks.io/docs/self_hosted_docker/) container self hosted on Docker
- [oauth2-proxy](https://github.com/oauth2-proxy/oauth2-proxy) reverse proxy container for authentication
- Reverse proxy with SSL termination at the edge (HTTPS)

## Pocket ID Setup
1. Create a new OIDC client (example: `healthchecks`)
2. Enable the **PKCE** checkmark for maximum security
3. Copy the **Client ID** and **Client Secret** for use below
4. The **Callback URL** will be automatically populated at first login (Pocket v.1.2.0+)

## Configure oauth2-proxy

In the same `docker-compose.yml` you use for Healthchecks:

1. Add a new **oauth2-proxy** container under the `services:` section with the following config:
    ```yml
    oauth2-proxy: 
        image: quay.io/oauth2-proxy/oauth2-proxy
        restart: unless-stopped
        command: --config /oauth2-proxy.cfg
        volumes:
        - ./oauth2-proxy.cfg:/oauth2-proxy.cfg
        ports:
        - 1234:4180
    ```

2. Add the following to the Healthchecks `environment:` section:

    ```
    - REMOTE_USER_HEADER=HTTP_X_FORWARDED_EMAIL
    ```

3. Comment out the `ports:` section on Healthchecks, so that oauth2-proxy picks up the authentication request instead of Healthchecks directly.

4. Create a file beside `docker-compose.yml` called `oauth2-proxy.cfg` with the following config. Make sure to update with your own **Client ID**, **Client Secret**, and **Pocket ID URL**:

    ```
    provider_display_name="Pocket ID"
    provider="oidc"
    oidc_issuer_url="<<Pocket ID URL>>"
    client_id="<<Client ID>>"
    client_secret="<<Client Secret>>"
    cookie_secret="xxx" # generate with: openssl rand -base64 32 | tr -- '+/' '-_'
    upstreams="http://healthchecks:8000" # internal port
    code_challenge_method="S256" # PKCE challenges plain or S256
    skip_auth_routes = [".*/ping", ".*/api", ".*/badge"]
    reverse_proxy = true
    scope = "openid email profile groups"

    cookie_expire="0" # seconds, 0 for session
    cookie_name="__Host-oauth2-proxy" # or __Secure-oauth2-proxy (less secure)
    cookie_secure="true"
    email_domains = ["*"]
    http_address="0.0.0.0:4180"
    insecure_oidc_allow_unverified_email = "true"
    ```

5. Update your public facing edge reverse proxy config (Caddy, Nginx, etc.) to forward `https://hc.domain.com` to **port `1234`** (the external port for the oauth2-proxy)

6. Restart the entire stack with 
    ```sh
    docker compose down 
    docker compose pull 
    docker compose up -d 
    ```

You can now login to Healthchecks with Pocket ID.

## Example full stack 

```yml
---
services:
  healthchecks:
    image: healthchecks/healthchecks:latest
    environment:
      - ALLOWED_HOSTS=hc.example.com
      - DB=sqlite
      - DB_NAME=/data/hc.sqlite
      - SECRET_KEY=${SECRET_KEY}
      - SITE_ROOT=https://hc.example.com
      - PING_EMAIL_DOMAIN=hc.example.com
      - REGISTRATION_OPEN=False
      - SITE_NAME=Healthchecks
      - RP_ID=hc.example.com
      - REMOTE_USER_HEADER=HTTP_X_FORWARDED_EMAIL
    volumes:
      - ./data:/data
    restart: unless-stopped
    # ports:
    #   - 8000:8000
  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy
    restart: unless-stopped
    command: --config /oauth2-proxy.cfg
    volumes:
      - ./oauth2-proxy.cfg:/oauth2-proxy.cfg
    ports:
      - 1234:4180
```

---

// File: client-examples/immich

# Immich

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `immich`).
2. Set the callback URLs:  
    ```
    https://<IMMICH-DOMAIN>/auth/login
    https://<IMMICH-DOMAIN>/user-settings
    app.immich:///oauth-callback
    ```
4. Copy the **Client ID**, **Client Secret**, and **OIDC Discovery URL**.

## Configure Immich
1. Open Immich and navigate to:
   **`Administration > Settings > Authentication Settings > OAuth`**
2. Enable **Login with OAuth**.
3. Fill in the required fields:
   - **Issuer URL**: Paste the `OIDC Discovery URL` from Pocket ID.
   - **Client ID**: Paste the `Client ID` from Pocket ID.
   - **Client Secret**: Paste the `Client Secret` from Pocket ID.
4. *(Optional)* Change `Button Text` to `Login with Pocket ID`.
5. Save the settings.
6. Test the OAuth login to ensure it works.

---

// File: client-examples/jellyfin

# Jellyfin

> Due to the current limitations of the Jellyfin SSO plugin, this integration will only work in a browser. When tested, the Jellyfin app did not work and displayed an error, even when custom menu buttons were created.

> To view the original references and a full list of capabilities, please visit the [Jellyfin SSO OpenID Section](https://github.com/9p4/jellyfin-plugin-sso?tab=readme-ov-file#openid).

## Requirements

- [Jellyfin Server](https://jellyfin.org/downloads/server)
- [Jellyfin SSO Plugin](https://github.com/9p4/jellyfin-plugin-sso)
- HTTPS connection to your Jellyfin server

## OIDC - Pocket ID Setup

To start, we need to create a new SSO resource in our Jellyfin application.

> Replace the `JELLYFINDOMAIN` and `PROVIDER` elements in the URL.

1. Log into the admin panel, and go to OIDC Clients -> Add OIDC Client.
2. **Name**: Jellyfin (or any name you prefer)
3. **Callback URL**: `https://JELLYFINDOMAIN.com/sso/OID/redirect/PROVIDER`
4. For this example, we’ll be using the provider named "test_resource."
5. Click **Save**. Keep the page open, as we will need the OID client ID and OID secret.

## OIDC Client - Jellyfin SSO Resource

1. Visit the plugin page (<i>Administration Dashboard -> My Plugins -> SSO-Auth</i>).
2. Enter the <i>OID Provider Name (we used "test_resource" as our name in the callback URL), Open ID, OID Secret, and mark it as enabled.</i>
3. The following steps are optional based on your needs. In this guide, we’ll be managing only regular users, not admins.

![img.png](imgs/jellyfin_img.png)

> To manage user access through groups, follow steps **4, 5, and 6**. Otherwise, leave it blank and skip to step 7.

![img2.png](imgs/jellyfin_img2.png)

4. Under <i>Roles</i>, type the name of the group you want to use. **Note:** This must be the group name, not the label. Double-check in Pocket ID, as an incorrect name will lock users out.
5. Skip every field until you reach the **Role Claim** field, and type `groups`.
   > This step is crucial if you want to manage users through groups.
6. Repeat the above step under **Request Additional Scopes**. This will pull the group scope during the sign-in process; otherwise, the previous steps won’t work.

![img3.png](imgs/jellyfin_img3.png)

7. Skip the remaining fields until you reach **Scheme Override**. Enter `https` here. If omitted, it will attempt to use HTTP first, which will break as WebAuthn requires an HTTPS connection.
8. Click **Save** and restart Jellyfin.

## Optional Step - Custom Home Button

Follow the [guide to create a login button on the login page](https://github.com/9p4/jellyfin-plugin-sso?tab=readme-ov-file#creating-a-login-button-on-the-main-page) to add a custom button on your sign-in page. This step is optional, as you could also provide the sign-in URL via a bookmark or other means.

## Signing into Your Jellyfin Instance

Done! You have successfully set up SSO for your Jellyfin instance using Pocket ID.

> **Note:** Sometimes there may be a brief delay when using the custom menu option. This is related to the Jellyfin plugin and not Pocket ID.

If your users already have accounts, as long as their Pocket ID username matches their Jellyfin ID, they will be logged in automatically. Otherwise, a new user will be created with access to all of your folders. Of course, you can modify this in your configuration as desired.

This setup will only work if sign-in is performed using the `https://jellyfin.example.com/sso/OID/start/PROVIDER` URL. This URL initiates the SSO plugin and applies all the configurations we completed above.

---

// File: client-examples/karakeep

# Karakeep

1. In Pocket-ID create a new OIDC Client, name it i.e. `Karakeep`
2. Set the callback url to: `https://<your-karakeep-subdomain>.<your-domain>/api/auth/callback/custom`
3. Open your `.env` file from your Karakeep compose and add these lines:

```ini
OAUTH_WELLKNOWN_URL=https://<your-pocket-id-subdomain>.<your-domain>/.well-known/openid-configuration
OAUTH_CLIENT_SECRET=<client secret from the created OIDC client>
OAUTH_CLIENT_ID=<client id from the created OIDC client>
OAUTH_PROVIDER_NAME=Pocket-ID
NEXTAUTH_URL=https://<your-karakeep-subdomain>.<your-domain>

```

4. Optional: If you like to disable password authentication and link your existing Karakeep account with your Pocket-ID identity.

```ini
DISABLE_PASSWORD_AUTH=true
OAUTH_ALLOW_DANGEROUS_EMAIL_ACCOUNT_LINKING=true
```

---

// File: client-examples/kasm

# Kasm

## Kasm Setup
1. In Kasm, login using an administrator account
2. From the navigation pane on the left, select 'Access Management' --> 'Authentication' --> 'OpenID'
3. Click the 'Add Config' button on the right. Scroll to the bottom of the page and copy the 'redirect URL' - this will be the callback URL configured in PocketID
4. Open PocketID in a new tab and continue configuration below.

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client (example: `kasm`).
2. Set the Callback URL to the value of the 'redirect URL' copied from Kasm (example: `https://kasm.domain.com/api/oidc_callback`)
3. Do *not* enable PKCE, as it is not supported by Kasm
4. Copy the generated **Client ID** and **Client Secret** values for next steps.

## Kasm Setup, continued
1. Back in the Kasm admin view, fill out the fields as follows:

    a. Display name: the string a Kasm user will see when logging in (example: `Click here to authenticate with PocketID`, or similar)

    b. Auto login: This can be optionally enabled to bypass the Kasm local login and go straight to PocketID. This can be enabled *after* setup is complete.

    c. Client ID: Enter the Client ID value from PocketID

    d. Client Secret: Enter the Client Secret value copied from PocketID

    e. Authorization URL: Enter the Authorization URL copied from PocketID

    f. Token URL: Enter the Token URL copied from PocketID

    g. User Info URL: Enter the Userinfo URL copied from PocketID

    h. Scope: The following values can be entered: [`openid, email, profile, groups`]. These values can be extracted by entering the OIDC Discovery URL in a web browser, and looking for the "scopes_supported" string

    i. Username attribute: Enter "preferred_username"

    j. Groups attribute: Enter "groups"

    k. Redirect URL: This value is pre-populated and doesn't need to be changed

    l. OpenID Connect Issuer: This URL is optional and is simply the base URL where PocketID is accessed (example: `https://auth.domain.com`)

    m. Logout with OIDC provider: This is configured in conjunction with the value from step `l` above. If configured, this will prompt a user who logs out of Kasm to also log out of PocketID for additional security.

## Testing

Once setup, save all configurations and login to Kasm in a private/incognito browser window. You should be able to click PocketID to login accordingly.  If auto-login was enabled, it will redirect to PocketID immediately, skipping the Kasm local login.

**Note**: In case you need to login to Kasm using local accounts (for instance, admin access), this can be done by click "Cancel" in PocketID before selecting your passkey. If auto login is enabled, this has to be done quickly before PocketID redirects to Kasm.

---

// File: client-examples/komodo

# Komodo

The following example variables are used, and should be replaced with your actual URLS.

- komodo.example.com (The url of your Komodo instance.)
- id.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `Komodo`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://komodo.example.com/auth/oidc/callback`.
4. Copy the `Client ID`, and `Client Secret` for use in the next steps.

## Komodo Setup

**This example uses the docker-compose deployment type of komodo** See the [Official Docs](https://komo.do/docs/intro) for more information.

Add the following lines to your komodo `.env` file replacing the values with the ones you copied above:

```env
KOMODO_OIDC_ENABLED=true
KOMODO_OIDC_PROVIDER=https://id.example.com
KOMODO_OIDC_CLIENT_ID=<your client id from above>
KOMODO_OIDC_CLIENT_SECRET=<your client id from above>
## Make usernames the full email.
KOMODO_OIDC_USE_FULL_EMAIL=true
```

Save and redeploy komodo and you should be able to login using OIDC with Pocket ID.

---

// File: client-examples/linkding

# Linkding

The following example variables are used, and should be replaced with your actual URLS.

- **linkding.example.com:** The URL of your Linkding instance.
- **pocketid.example.com:** The URL of your Pocket ID instance.

## Pocket ID Setup

1. **Create a New OIDC Client:**  
   In your Pocket ID instance, create a new OIDC Client and give it a name (e.g., "Linkding").

2. **Set a Logo (Optional):**  
   Set a logo for the OIDC Client if desired.

3. **Configure the Callback URL:**  
   Set the callback URL to:
   ```
   https://linkding.example.com/oidc/callback/
   ```

4. **Copy Credentials:**  
   Copy the Client ID and Client Secret provided by Pocket ID for use in Linkding.


## Linkding Setup

This example assumes you are using a docker-compose deployment for Linkding. For more details, see the [Linkding Documentation](https://linkding.link/installation) or more specifically, [the OIDC section](https://linkding.link/options/#ld_enable_oidc).

1. **Edit Your .env File:**  
   Add the following environment variables to your Linkding `.env` file. Replace the placeholder values with those from Pocket ID:

   ```ini
   # Enable OIDC in Linkding
   LD_ENABLE_OIDC=True

   # Client credentials from Pocket ID
   OIDC_RP_CLIENT_ID=<your client id from Pocket ID>
   OIDC_RP_CLIENT_SECRET=<your client secret from Pocket ID>

   # OIDC endpoints
   OIDC_OP_AUTHORIZATION_ENDPOINT=https://pocketid.example.com/authorize
   OIDC_OP_TOKEN_ENDPOINT=https://pocketid.example.com/api/oidc/token
   OIDC_OP_USER_ENDPOINT=https://pocketid.example.com/api/oidc/userinfo
   OIDC_OP_JWKS_ENDPOINT=https://pocketid.example.com/.well-known/jwks.json

   # Use PKCE if required (adjust based on your setup, True by default)
   OIDC_USE_PKCE=False

   # Verify SSL certificate (set to False if using self-signed certificates)
   OIDC_VERIFY_SSL=True

   # Optional: Customize the username claim (defaults to email if not set)
   # OIDC_USERNAME_CLAIM=preferred_username
   ```

2. **Redeploy Linkding:**  
   Save the changes to your `.env` file and redeploy your Linkding instance using docker-compose.

Once redeployed, you should be able to log in using OIDC with Pocket ID.

---

// File: client-examples/mealie

# Mealie

1. In Pocket-ID, create a new OIDC Client, name it i.e. `Mealie`.
2. Set the callback URL to: `https://<your-mealie-domain>/login`
3. Add the following to your docker `.env` file for Mealie:


```yaml
    environment:
      ALLOW_SIGNUP: "true"
    #   LOG_LEVEL: "DEBUG"
    #   DB_ENGINE: sqlite # Optional: 'sqlite', 'postgres'  
      OIDC_AUTH_ENABLED: True
      OIDC_SIGNUP_ENABLED: True
      OIDC_CONFIGURATION_URL: https://<your pocket ID domain>/.well-known/openid-configuration
      OIDC_CLIENT_ID: <client id from pocket ID>
      OIDC_CLIENT_SECRET: <client secret from pocket ID>
```
```ini
  OIDC_AUTH_ENABLED=true
  OIDC_SIGNUP_ENABLED=true
  OIDC_CLIENT_ID=<client id from pocket ID>
  OIDC_CLIENT_SECRET=<client secret from pocket ID>
  OAUTH_PROVIDER_NAME=Pocket ID
  OIDC_CONFIGURATION_URL=https://<your pocket id url>/.well-known/openid-configuration
```

---

// File: client-examples/memos

# Memos

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client named `Memos` (or any name you prefer).  
2. (Optional) Set a logo for the OIDC client.  
3. Set the callback URL to: `https://< Memos Host >/auth/callback`  
4. Copy the `Client ID`, `Client Secret`, `Authorization endpoint`, `Token endpoint`, and `User endpoint` for the next steps.  

## Memos Setup

1. Log in to Memos as an admin.
2. Go to **Settings → SSO → Create**.  
3. Set **Template** to `Custom`.   
4. Enter the `Client ID` into the **Client ID** field.  
5. Enter the `Client Secret` into the **Client secret** field.  
6. Enter the `Authorization URL` into the **Authorization endpoint** field.
7. Enter the `Token URL` into the **Token endpoint** field.
8. Enter the `Userinfo URL` into the **User endpoint** field.
11. Set **Scopes** to `openid email profile`.
12. Set **Identifier** to `preferred_username`
13. Set **Display Name** to `profile`.
14. Set **Email** to `email`.
15. Save the settings and test the OAuth login.

---

// File: client-examples/miniflux

# Miniflux

1. Create a new OIDC Client in Pocket ID (e.g., `miniflux`).
2. In Callback URLs, add `https://<MINIFLUX DOMAIN>/oauth2/oidc/callback`
3. Save and get the Client ID and Client Secret
4. Set the following environment variables in your Miniflux instance:
   ```env
   OAUTH2_PROVIDER=oidc
   OAUTH2_CLIENT_ID=<client ID>
   OAUTH2_CLIENT_SECRET=<client secret>
   OAUTH2_REDIRECT_URL=https://<MINIFLUX DOMAIN>/oauth2/oidc/callback
   OAUTH2_OIDC_DISCOVERY_ENDPOINT=https://<POCKET ID DOMAIN> # no trailing slashes or ".well-known/openid-configuration"
   OAUTH2_OIDC_PROVIDER_NAME=PocketID
   OAUTH2_USER_CREATION=1 # optional, if you want nes users to be created automatically
   DISABLE_LOCAL_AUTH=1 # optional, if you want to disable local authentication
   ```
5. Restart Miniflux and enjoy!

---

// File: client-examples/minio

# Minio

## Pocket ID Setup

1. Create a new Group named `consoleAdmin` (case sensitive)
	- Adding your user to the `consoleAdmin` group logs you into Minio as an administrator. You can also add groups for the other built in policies, please see [ Minio Documentation ](https://min.io/docs/minio/linux/administration/identity-access-management/policy-based-access-control.html#built-in-policies) for more details.
2. Create a new OIDC Client and name it Minio (or whatever you want)
	- Set Callback URLs: `https://minio-console.example.com/oauth_callback`
	- Note `Client ID` and `Client Secret` for next steps

## Minio Setup

1. Log into Minio using admin (or root) credentials
2. Under Administrator, select Identity, then select OpenID
3. Click Create Configuration and enter the following:
	- Config URL: `https://auth.example.com/.well-known/openid-configuration`
	- Client ID: Your Client ID from Pocket ID
	- Client Secret: Your Client Secret from Pocket ID.
	- Claim Name: `groups`
	- Display Name: Pocket ID (or anything you want)
	- Scopes: `openid,profile,email,groups`
	- Redirect URI: `https://minio-console.example.com/oauth_callback`

## Notes

- You will need to enter your Client Secret every time you edit the OpenID configuration. It may be best to simply regenerate a new one on Pocket ID and enter that when required instead of managing the secret.
- If your are using `MINIO_BROWSER_REDIRECT_URL=https://minio.example.com/minio-console/` in your Minio configuration, then use `https://minio.example.com/minio-console/oauth_callback` for Callback URLs in Pocket ID and Redirect URI in Minio OpenID configuration.

---

// File: client-examples/netbox

# Netbox

**This guide does not currently show how to map groups in netbox from OIDC claims**

The following example variables are used, and should be replaced with your actual URLS.

- netbox.example.com (The url of your netbox instance.)
- id.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `Netbox`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://netbox.example.com/oauth/complete/oidc/`.
4. Copy the `Client ID`, and the `Client Secret` for use in the next steps.

## Netbox Setup

This guide assumes you are using the git based install of netbox.

1. On your netbox server navigate to `/opt/netbox/netbox/netbox`
2. Add the following to your `configuration.py` file:

```python
# Remote authentication support
REMOTE_AUTH_ENABLED = True
REMOTE_AUTH_BACKEND = 'social_core.backends.open_id_connect.OpenIdConnectAuth'
REMOTE_AUTH_HEADER = 'HTTP_REMOTE_USER'
REMOTE_AUTH_USER_FIRST_NAME = 'HTTP_REMOTE_USER_FIRST_NAME'
REMOTE_AUTH_USER_LAST_NAME = 'HTTP_REMOTE_USER_LAST_NAME'
REMOTE_AUTH_USER_EMAIL = 'HTTP_REMOTE_USER_EMAIL'
REMOTE_AUTH_AUTO_CREATE_USER = True
REMOTE_AUTH_DEFAULT_GROUPS = []
REMOTE_AUTH_DEFAULT_PERMISSIONS = {}

SOCIAL_AUTH_OIDC_ENDPOINT = 'https://id.example.com'
SOCIAL_AUTH_OIDC_KEY = '<client id from the first part of this guide>'
SOCIAL_AUTH_OIDC_SECRET = '<client id from the first part of this guide>'
LOGOUT_REDIRECT_URL = 'https://netbox.example.com'
```

3. Save the file and restart netbox: `sudo systemctl start netbox netbox-rq`

---

// File: client-examples/nextcloud

Nextcloud does not come with OIDC/SSO installed out-of-the-box. Therefore, it's necessary to install a Nextcloud app for this functionality. There are two main options: `nextcloud/user_oidc` and `pulsejet/nextcloud-oidc-login`. This guide will focus on **`nextcloud/user_oidc`**, as it is maintained by Nextcloud and is expected to be supported longer. 

The following example variables are used and should be replaced with your actual URLs:
- `nextcloud.example.com` (The URL of your Nextcloud instance.)
- `id.example.com` (The URL of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID create a new OIDC Client, name it, for example, `Nextcloud`.
2. Set a logo for this OIDC Client if you would like to.
3. Set the callback URL to: `https://nextcloud.example.com/apps/user_oidc/code`.
4. Set the Logout Callback URLs to the address the nextcloud/user_oidc plugin will give you. For most of the time it will be the address below with the portion `PocketID` being the name you gave to it on Nextcloud. e.g:`https://nextcloud.example.com/apps/user_oidc/backchannel-logout/PocketID`.
5. Leave `Public Client` and `PKCE` unchecked.
6. Copy the `Client ID`, `Client Secret`, `OIDC Discovery URL` and `Logout URL` for use in the next steps.

## Nextcloud Setup

1. Login to Nextcloud with your admin account.
2. On the right upper corner, click your profile picture/logo and select `Apps`
3. On `Integration`select `OpenID Connect user backend` and install it.
4. After installing, go to `Administration settings`-> `OpenID Connect`.
5. Click the `+` and add the information and add the information as follows:
	1. `Identifier` -> `PocketID` (suggestion only)
	2. `Client ID` -> `Client ID`from Pocket ID
	3. `Client secret` -> `Client Secret` from Pocket ID
	4. `Discovery endpoint` -> `OIDC Discovery URL`from Pocket ID
	5. `Custom end session endpoint`-> `Logout URL`from Pocket ID
	6. `Scope` -> openid email profile
	7. By default, Nextcloud will create a new user when logging in using Pocket ID. If you want to log in with an existing Nextcloud user, you need to tell Nextcloud how to match Pocket ID users with Nextcloud users. You can either:
 		- Match accounts using a custom claim: `User ID mapping` -> nextcloud_username

		  And for each user in the Pocket ID configuration, add a custom claim `nextcloud_username` -> the Nextcloud account name to log into.

		- If you have unchecked `Enable Self-Account Editing` in the Pocket ID configuration, match accounts using the Pocket ID username directly: `User ID mapping` -> preferred_username
  
		  (if `Enable Self-Account Editing` is enabled, Pocket ID users are allowed to change their own username and therefore chose the Nextcloud account they log into!)
	8. (Optional) Check `Use group provisioning`if you want Pocket ID groups to be replicated on Nextcloud
	9. `Use unique user ID` -> Checked, `Send ID token hint on logout` -> Unchecked
6. After the creation of the Provider, make sure `Backchannel Logout URL` and `Redirect URI` matches the setting on Pocket ID.

## Logging In on Nextcloud on mobile (Important)

The mobile app for Nextcloud on IOS does not accept passkey input, which create a small barrier when using Pocket ID. If you didn't disable regular login, you can use your Nextcloud username and password to login. If you disabled the regular login, you have to create a `Login Code`on your Pocket ID dashboard (id.example.com). After getting the `Login Code`, go to the Nextcloud app, add your Nextcloud URL (nextcloud.example.com). When Pocket ID login appears, select `Don't have access to your passkey?`, select `Login Code`and enter the code you received previously. 

## Disabling traditional login In on Nextcloud

You can disable the built-in login form with 2 different ways, which are going to produce slightly different outcomes:

1. Disabling login form: On the `config.php`of Nextcloud, set an entry for `'hide_login_form' => true`. This will still show Nextcloud login page when going to `nextcloud.example.com`, but it show that "The Nextcloud login form is disabled." and a button to `Login with PocketID`will appear instead. 
	1. The login form is only hidden and can be access by appending login?direct=1 to the URL `nextcloud.example.com/login?direct=1`.
![Img 1](https://github.com/user-attachments/assets/a34b5ea2-bc86-4d10-8a0e-6c253329235e)


1. Remove built-in login form: You have to execute a command inside the container using Nextcloud CLI method. Since there are many containers and platforms, please make sure use the appropriate form for you container/platform combo
	1. Run -> `occ config:app:set user_oidc allow_multiple_user_backends --value=0`
	2. The built-in login form won't be available anymore when going to `nextcloud.example.com`and will be automatically redirected to login with Pocket ID
	3. This only works if the user have a single OIDC provider and no other login methods

## Troubleshooting if you can't login into Nextcloud

1. Using Nextcloud CLI, reactivate the login form: `occ config:app:set user_oidc allow_multiple_user_backends --value=1`
2. Remove current ODIC configuration with `occ user_oidc:provider:delete PocketID`. Substitute `PocketID`to the name you used or the one listed on `user_oidc:provider`
3. Create a new OIDC connection with the command below. Make sure to adjust as appropriate. 
	1. After the command is run and you can login back to Nextcloud, make sure to adjust the `Scope`and 
	2. occ user_oidc:provider `Identifier` \
     --clientid="`Client ID`" \
     --clientsecret="`Client secret`" \
     --discoveryuri="`OIDC Discovery URL`" \
     --mapping-uid="preferred_username" \
     --unique-uid=1 \
     --send-id-token-hint=0
     
     *(Note: Replace 'Identifier', "Client ID", "Client Secret", and "OIDC Discovery URL" with your actual values.)*

---

// File: client-examples/oCIS

# oCIS

## What is oCIS

ownCloud Infinite Scale (oCIS) is the new file sync & share platform that will be the foundation of your data management platform.

- https://owncloud.dev/ocis/

## Preparation

- `ocis.company.com` is the FQDN of the ocis server.
- `pocket-id.company.com` is the FQDN of the pocket-id server.

:::note
This documentation lists only the settings that you need to change from their default values. Be aware that any changes other than those explicitly mentioned in this guide could cause issues accessing your application.
:::
:::info
Pocket ID sends the Access-Control-Allow-Origin "pocket-id.company.com" for pocket-id.company.com/.well-known/openid-configuration . See https://github.com/pocket-id/pocket-id/issues/329
If you use nginx instead of caddy (CADDY_DISABLED=true) add to the location part of your nginx configuration for Pocket ID

```
location /.well-known/ {
.
.
.

    proxy_hide_header Access-Control-Allow-headers;
    proxy_hide_header Access-Control-Allow-Origin;
    add_header Access-Control-Allow-Origin "$http_origin";
}
```

:::

## Pocket ID configuration

To support the integration of oCIS with Pocket ID, you need to create a OIDC Client in Pocket ID.

### Create the groups used by oCIS in Pocket ID

1. Log in to Pocket ID as an admin
2. Navigate to **User Groups** and click **Add Group** (repeat for each group - 4 times)

   1. **Friendly Name:** `ocis admin users group` **Name:** `ocisAdmin`
   2. **Friendly Name:** `ocis space admin user group` **Name:** `ocisSpaceAdmin`
   3. **Friendly Name:** `ocis user group` **Name:** `ocisUser`
   4. **Friendly Name:** `ocis guest group` **Name:** `ocisGuest`

### Bind roles used by oCIS with Pocket ID groups

1. Log in to Pocket ID as an admin
2. Navigate to **User Groups**
3. click the 3 dots `...` on the side of ocisAdmin, ocisSpaceAdmin, ocisUser and ocisGuest and press edit (do per group)

   1. Add `roles` and `ocisAdmin` to **Custom Claims** and click `Save` in ocisAdmin group. Add admin users to this group under Users.
   2. Add `roles` and `ocisSpaceAdmin` to **Custom Claims** and click `Save` in ocisSpaceAdmin group. Add the space admin users to this group under Users.
   3. Add `roles` and `ocisUser` to **Custom Claims** and click `Save` in ocisUser group. Add standard users to this group under Users.
   4. Add `roles` and `ocisGuest` to **Custom Claims** and click `Save` in ocisGuest group. Add guests to this group under Users.

### Create an OIDC Client

1. Log in to Pocket ID as an admin
2. Navigate to **OIDC Clients** and click **Add OIDC Client**

- **Name:** ocis
- **Callback URLs:** https://ocis.company.com/oidc-callback.html
- **Public Client:** [x]

Click `Save`

### Add groups to Pocket ID

1. Log in to Pocket ID as an admin
2. Navigate to **OIDC Clients** and click edit **ocis**

   - [x] **ocisAdmin**
   - [x] **ocisSpaceAdmin**
   - [x] **ocisUser**
   - [x] **ocisGuest**

3. Copy the Client ID

Click `Save`

## oCIS configuration

### Environment Variables for oCIS and OIDC with Pocket ID

Add your client id from Pocket ID to WEB_OIDC_CLIENT_ID=

```
OCIS_URL=https://ocis.company.com
PROXY_AUTOPROVISION_ACCOUNTS=true
PROXY_ROLE_ASSIGNMENT_DRIVER=oidc
OCIS_OIDC_ISSUER=https://pocket-id.company.ch
PROXY_OIDC_REWRITE_WELLKNOWN=true
WEB_OIDC_CLIENT_ID=**<insert your client id from pocket id>**
PROXY_USER_OIDC_CLAIM=preferred_username
OCIS_EXCLUDE_RUN_SERVICES=idp
PROXY_CSP_CONFIG_FILE_LOCATION=/etc/ocis/csp.yaml
```

example of csp.yaml see https://github.com/owncloud/ocis/blob/master/deployments/examples/ocis_keycloak/config/ocis/csp.yaml

change line 9 (pocket-id.company.com) under connect-src to your Pocket ID URL and mount it to /etc/ocis/csp.yaml in your podman or docker settings.

```
directives:
  child-src:
    - '''self'''
  connect-src:
    - '''self'''
    - 'blob:'
    - 'https://raw.githubusercontent.com/owncloud/awesome-ocis/'
    # In contrary to bash and docker the default is given after the | character
    - 'https://pocket-id.company.com/'
  default-src:
    - '''none'''
  font-src:
    - '''self'''
  frame-ancestors:
    - '''none'''
  frame-src:
    - '''self'''
    - 'blob:'
    - 'https://embed.diagrams.net/'
  img-src:
    - '''self'''
    - 'data:'
    - 'blob:'
    - 'https://raw.githubusercontent.com/owncloud/awesome-ocis/'
  manifest-src:
    - '''self'''
  media-src:
    - '''self'''
  object-src:
    - '''self'''
    - 'blob:'
  script-src:
    - '''self'''
    - '''unsafe-inline'''
  style-src:
    - '''self'''
    - '''unsafe-inline'''
```

### Create additional OIDC clients for ownCloud desktop and mobile clients:

The Client IDs and secrets are hardcoded in the ownCloud desktop and mobile clients. You can find these values [here](https://doc.owncloud.com/server/10.15/admin_manual/configuration/user/oidc/oidc.html#client-ids-secrets-and-redirect-uris).

As a workaround, you need to create OIDC Client entries for each, and then manually specify the client ID and secrets that ownCloud expects them to be.

1. Install sqlite into the `pocket-id` container so you can modify the database entries:

    ```bash
    cd path-to-pocket-id-compose-file

    docker compose exec pocket-id apk add sqlite
    docker compose exec pocket-id sqlite3

    # EXAMPLE (see below for more details):
    # docker compose exec pocket-id sqlite3 /app/data/pocket-id.db "UPDATE oidc_clients SET id='owncloud-client-id', secret='owncloud-client-secret-bcrypt-hashed' WHERE id='current-client-id';"
    ```

    * Replace `owncloud-client-id` with the desired client ID.
    * Replace `owncloud-client-secret-bcrypt-hashed` with the bcrypt-hashed version of the client secret you want to use. To generate this hash, visit https://bcrypt-generator.com/, input your client secret, and use the resulting hash (replace the `$`'s with backslashes).
    * Replace `current-client-id` with the client ID of the existing client you want to update.

2. Obtain the client ID for each entry and run the following command to enable the client to authenticate. Replace `current-client-id` with the client ID of the existing client you want to update.

    - Desktop Client
        ```bash
        docker compose exec pocket-id sqlite3 /app/data/pocket-id.db "UPDATE oidc_clients SET id='xdXOt13JKxym1B1QcEncf2XDkLAexMBFwiT9j6EfhhHFJhs2KM9jbjTmf8JBXE69', secret='\$2a\$12\$HbbJMheIYyo8yfEuvm8Boe0baMZTIDXzchpVdLsfPqc3Eb.oULn5W' WHERE id='current-client-id';"
        ```
        > Callback URL: `http://127.0.0.1` and `http://localhost`

    - Android

        ```bash
        docker compose exec pocket-id sqlite3 /app/data/pocket-id.db "UPDATE oidc_clients SET id='e4rAsNUSIUs0lF4nbv9FmCeUkTlV9GdgTLDH1b5uie7syb90SzEVrbN7HIpmWJeD', secret='\$2a\$12\$sdQWjAxlQzRojU3bhvxp/e/5aY/tzskKqD76AQpiBJpj7USgWhZUO' WHERE id='current-client-id';"
        ```
        > Callback URL: `oc://android.owncloud.com`

    - iOS:

        ```bash
        docker compose exec pocket-id sqlite3 /app/data/pocket-id.db "UPDATE oidc_clients SET id='mxd5OQDk6es5LzOzRvidJNfXLUZS2oN3oUFeXPP8LpPrhx3UroJFduGEYIBOxkY1', secret='\$2a\$12\$3qHWSJRKBVoHVrn7kp4NFuEN4r.wmh9zB8oRjtYwHBUzwM818Hhje' WHERE id='current-client-id';"
        ```
        > Callback URL: `oc://ios.owncloud.com`

3. You can verify the changes with:

    ```bash
    docker compose exec pocket-id sqlite3 /app/data/pocket-id.db "SELECT * FROM oidc_clients;"
    ```

---

// File: client-examples/open-webui

# Open WebUI

1. In Pocket-ID, create a new OIDC Client, name it i.e. `Open WebUI`.
2. Set the callback URL to: `https://openwebui.domain/oauth/oidc/callback`
3. Optional but recommended - Create a group for users and a group for admins in Pocket-ID. eg: `users` and `admins`
4. Add the following to your docker `.env` file for Open WebUI:

```ini
  ENABLE_OAUTH_SIGNUP=true
  OAUTH_CLIENT_ID=<client id from pocket ID>
  OAUTH_CLIENT_SECRET=<client secret from pocket ID>
  OAUTH_PROVIDER_NAME="Pocket ID"
  OPENID_PROVIDER_URL=https://<your pocket id url>/.well-known/openid-configuration
  OAUTH_MERGE_ACCOUNTS_BY_EMAIL=true

# For group management, you can use the following variables:
  ENABLE_OAUTH_ROLE_MANAGEMENT=true
  ENABLE_OAUTH_GROUP_MANAGEMENT=true
  ENABLE_OAUTH_GROUP_CREATION=true
# Make sure those match the ones you set up before in Pocket-ID
  OAUTH_ALLOWED_ROLES="users, admins"
  OAUTH_ADMIN_ROLES=admins
  OAUTH_ROLES_CLAIM=groups
  OAUTH_SCOPES="openid email profile groups"

# Optional but useful variables:

# So users are immediately added instead of being "pending"
  DEFAULT_USER_ROLE=user
# Make Pocket-ID the only auth method
# comment out if you need access via password
  ENABLE_LOGIN_FORM=false
# Make Pocket-ID the source of truth for the profile pictures
  OAUTH_UPDATE_PICTURE_ON_LOGIN=true
```

Its recommended you have a separate admin account without oauth in Open WebUI so you don't get locked out when testing the integration.
[Read more](https://docs.openwebui.com/getting-started/env-configuration#oauth)

---

// File: client-examples/outline

---
id: outline
---

# Outline

Setting up [Outline](https://docs.getoutline.com/s/hosting/doc/oidc-8CPBm6uC0I) to authenticate with Pocket ID can be accomplished with the configuration below.

Your Outline and Pocket ID server URLs must both use HTTPS.

## Create OIDC  Client

1. Login to your **Pocket ID** server as an admin
1. Go to **OIDC Clients** and click **Add OIDC Client**
1. Set an app **Name** like `Outline`
1. Set the **Callback URL** to:
    `https://outline.yourdomain.com/*`
1. Upload a **Logo** if desired
1. Click **Save**. Then copy these values for later:
    - Client ID
    - Client Secret
    - Authorization URL
    - Token URL
    - Userinfo URL
    - Logout URL

## Configure Outline for OIDC

To configure Outline, use the following variables to utilize OpenID Connect.

1. Add the following to your **Outline** container `docker.env`:

    ```
    OIDC_CLIENT_ID=Client ID
    OIDC_CLIENT_SECRET=Client Secret
    OIDC_AUTH_URI=Authorization URL
    OIDC_TOKEN_URI=Token URL
    OIDC_USERINFO_URI=Userinfo URL
    OIDC_LOGOUT_URI=Logout URL

    OIDC_DISPLAY_NAME=Pocket ID
    OIDC_USERNAME_CLAIM=preferred_username
    OIDC_SCOPES=openid profile email groups
    ```

1. Restart your **Outline** container:

    ````bash
    docker compose down 
    docker compose up -d 
    ````

1. Login to **Outline** with your Pocket ID
1. Review and update SSO settings at:
    **Settings > Workspace > Security**

---

// File: client-examples/pangolin

# Pangolin

## Pocket ID Setup 

1. In Pocket ID create a new OIDC Client, name it, for example, `pangolin`
2. In the "callback URL" field, enter any URL - this will be overwritten in a future step.
	- NOTE: You cannot proceed with generating the Client ID, Secret, Auth/Token URL's unless or until this field is filled out. This has been raised under a [Feature Request](https://github.com/pocket-id/pocket-id/issues/538)
	- Additional guidance can be found in the [Pangolin docs](https://docs.fossorial.io/Pangolin/Identity%20Providers/Providers/pocket-id) for PocketID setup

3. Copy the `Client ID`, `Client Secret`, `Authorization URL` and `Token URL` for the following steps
    
We'll be coming back to set the Callback URL once we've setup Pangolin.

## Pangolin Setup

1. Log into Pangolin using your super user account
2. Under Server Admin, select Identity Providers, then "+ Add Identity Provider"
3. Enter the following:
    - Name: PocketID (or anything you want)
    - Select Provider Type: OAuth2/OIDC
	- Client ID: Your **Client ID** from Pocket ID
    - Client Secret: Your **Client Secret** from Pocket ID.
	- Authorization URL: Your **Authorization URL** from Pocket ID.
	- Token URL: Your **Token URL** from Pocket ID.
    - Identifier Path: One of `email`, `preferred_username` or `sub` (Advanced)
    - Email Path: `email`
    - Name Path: `name`
	- Scopes: `openid profile email`
4. Save your new Identity Provider
5. Under the general tab you can find the `Redirect URL`, copy this for the next step

## Pocket ID (cont)

1. Go back to your Pocket ID instance and edit your OIDC Client.
2. Add the `Redirect URL` from Pangolin as a Callback URL in the OIDC Client and save.


## Pangolin (cont)

> **Automatic user provisioning is only supported on a Pangolin Professional license.**

If you're on a non-Professional License, you'll need to manually create new users in Pangolin.

You can create one like so:

1. Back in your Pangolin instance, go to your organization, select Users, then "+ Create User".
2. Select "External User", select your Pocket ID Identity provider, and fill in the relevant details.

Depending on what you configured in `Identifier Path`, you'll need to add that in the `username` field.

- `email` will be your Pocket ID email.
- `preferred_username` will be your Pocket ID username.

Once you have your user created, you can save, log out from Pangolin, and test your new OIDC connection.

## Errors

### User not provisioned in the system

Make sure you have a user created in Pangolin and that the "Username" matches the `Identifier Path` used.

### Invalid callback URL, it might be necessary for an admin to fix this

Your Callback URL is not correctly defined in Pocket ID. Make sure this matches the `Redirect URL` in your Pangolin OIDC config.

Example: `https://pangolin.example.com/auth/idp/1/oidc/callback`

---

// File: client-examples/paperless-ngx

# paperless-ngx

Below URLs are used as placeholders for the paperless-ngx and Pocket ID instances. Replace them with the actual URLs.

- paperless-ngx.example.com (The url of your paperless-ngx instance.)
- pocketid.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client named `paperless-ngx` (or any name you prefer).  
2. (Optional) Set a logo for the OIDC client.  
3. Set the callback URL to: `https://paperless-ngx.example.com/accounts/oidc/pocket-id/login/callback/`  
4. Copy the `Client ID` and `Client Secret` for the next steps.

## paperless-ngx Docker Setup

1. Add The below environment variables for the paperless-ngx web server container. See the [docs](https://docs.paperless-ngx.com/configuration/#PAPERLESS_SOCIALACCOUNT_PROVIDERS) for more information. **NOTE:** The `provider_id` value, for e.g. `pocket-id` should match what is in the callback URL in the Pocket ID configuration described above. 
```yaml
PAPERLESS_APPS=allauth.socialaccount.providers.openid_connect
PAPERLESS_SOCIALACCOUNT_PROVIDERS='{"openid_connect":{"SCOPE":["openid","profile","email"],"OAUTH_PKCE_ENABLED":true,"APPS":[{"provider_id":"pocket-id","name":"Pocket-ID","client_id":"Place the Client ID","secret":"Place the Client Secret","settings":{"server_url":"https://pocketid.example.com"}}]}}' 
```
2. Restart your docker containers.
3. Now you should be able to login to paperless using OAuth.
3. To allow for your existing paperless-ngx user ID to be linked to the user in Pocket ID
   - Login to paperless-ngx using the password authentication.
   - Click on your user name on the top right corner and click **My Profile**.
   - Link the account to Pocket ID using the **Connect new social account** option.

---

// File: client-examples/pgadmin

# pgAdmin

The following example variables are used, and should be replaced with your actual URLS.

- pgadmin.example.com (The url of your pgAdmin instance.)
- id.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `pgAdmin`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://pgadmin.example.com/oauth2/authorize`.
4. Copy the `Client ID`, `Client Secret`, `Authorization URL`, `Userinfo URL`, `Token URL`, and `OIDC Discovery URL` for use in the next steps.

# pgAdmin Setup

1. Add the following to the `config_local.py` file for pgAdmin:

**Make sure to replace https://id.example.com with your actual Pocket ID URL**

```python
AUTHENTICATION_SOURCES = ['oauth2', 'internal'] # This keeps internal authentication enabled as well as oauth2
OAUTH2_AUTO_CREATE_USER = True
OAUTH2_CONFIG = [{
        'OAUTH2_NAME' : 'pocketid',
        'OAUTH2_DISPLAY_NAME' : 'Pocket ID',
        'OAUTH2_CLIENT_ID' : '<client id from the earlier step>',
        'OAUTH2_CLIENT_SECRET' : '<client secret from the earlier step>',
        'OAUTH2_TOKEN_URL' : 'https://id.example.com/api/oidc/token',
        'OAUTH2_AUTHORIZATION_URL' : 'https://id.example/authorize',
        'OAUTH2_API_BASE_URL' : 'https://id.example.com',
        'OAUTH2_USERINFO_ENDPOINT' : 'https://id.example.com/api/oidc/userinfo',
        'OAUTH2_SERVER_METADATA_URL' : 'https://id.example.com/.well-known/openid-configuration',
        'OAUTH2_SCOPE' : 'openid email profile',
        'OAUTH2_ICON' : 'fa-openid',
        'OAUTH2_BUTTON_COLOR' : '#fd4b2d' # Can select any color you would like here.
}]
```

---

// File: client-examples/pingvin

# Pingvin Share

## Requirements

- [Pingvin Share](https://stonith404.github.io/pingvin-share/setup/oauth2login#openid-connect) 
- HTTPS connection to your Pingvin server

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `pingvin`).
2. Set the **Callback URL** to the value below:
    ```
    https://<your-domain>/api/oauth/callback/oidc
    ```
3. *Optional:* Download a PNG or SVG **logo** from the [Pingvin Share project](https://github.com/stonith404/pingvin-share) and upload.
4. Copy the **Client ID**, **Client Secret**, and **OIDC Discovery URL** for use in the next section.

## Configure Pingvin using the UI

1. Open Pingvin and navigate to:
   **Administration > Configuration > Social Login**
2. Scroll down and fill in the fields with values from Pocket ID: 
   - **OpenID Connect:** `Enabled`
   - **OpenID Connect Discovery URI:** `OIDC Discovery URL`
   - **Sign out from OpenID Connect:** `Enabled` (if desired)
   - **OpenID Connect scope:** `openid email profile groups`

## Controlling access with groups

To control **general** and **admin** access to Pingvin using Pocket ID groups:

1. Open Pingvin and navigate to:
   **Administration > Configuration > Social Login**
2. Scroll down and fill in the following:
   - **OpenID Connect scope:** `openid email profile groups`
   - **Path to roles in OpenID Connect token:** `groups`
   - **OpenID Connect role for general access:** `pingvin` (or similar group name from Pocket ID)
   - **OpenID Connect role for admin access:** `pingvin_admin` (or similar group name from Pocket ID)

---

// File: client-examples/planka

# Planka

## Requirements

- [Planka](https://docs.planka.cloud/)
- HTTPS connection to your Planka instance

## Create OIDC Client in Pocket ID

1. Create a new OIDC Client in Pocket ID (e.g., `planka`).
2. Set the **Callback URL** to the value below:

    ```env
    https://<your-planka-instance>/oidc-callback
    ```

3. *Optional:* Download a PNG or SVG **logo** from the [Planka project](https://github.com/plankanban/planka) and upload.
4. Copy the **Client ID**, **Client Secret**, and **OIDC Discovery URL** for use in the next section.

5. Set the following environment variables in your Planka instance:

   ```env  
   OIDC_ISSUER=https://<OIDC Discovery URL> # remove "/.well-known/openid-configuration"
   OIDC_CLIENT_ID=<Client ID>
   OIDC_CLIENT_SECRET=<Client Secret>
   ```

6. Restart Planka and enjoy!

## Controlling admins access with groups

To control **admin** access to Planka using Pocket ID groups:

1. Set the following additional environment variables in your Planka instance:

   ```env
   OIDC_SCOPES=openid profile email groups
   OIDC_ROLES_ATTRIBUTE=groups
   OIDC_ADMIN_ROLES=<your Planka admin group name on Pocket ID>
   ```

2. Restart Planka and enjoy!

## Additional information

More information about Planka OIDC can be found [here](https://docs.planka.cloud/docs/configuration/oidc)

---

// File: client-examples/portainer

# Portainer

**This requires Portainers Business Edition**

The following example variables are used, and should be replaced with your actual URLS.

- portainer.example.com (The url of your Portainer instance.)
- id.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `Portainer`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://portainer.example.com/`.
4. Copy the `Client ID`, `Client Secret`, `Authorization URL`, `Userinfo URL`, `Logout URL`, and `Token URL` for use in the next steps.

# Portainer Setup

- While initially setting up OAuth in Portainer, its recommended to keep the `Hide internal authentication prompt` set to `Off` incase you need a fallback login
- This guide does **NOT** cover how to setup group claims in Portainer.

> Make sure to enabled the `Automatic user provisioning` option so users are auto-created in Portainer.

1. Open the Portainer web interface and navigate to: `Settings > Authentication`
2. Select `Custom OAuth Provider`
3. Paste the `Client ID` from Pocket ID into the `Client ID` field in Portainer.
4. Paste the `Client Secret` from Pocket ID into the `Client Secret` field in Portainer.
5. Paste the `Authorization URL` from Pocket ID into the `Authorization URL` field in Portainer.
6. Paste the `Token URL` from Pocket ID into the `Access token URL` field in Portainer.
7. Paste the `Userinfo URL` from Pocket ID into the `Resource URL` field in Portainer.
8. Set the `Redirect URL` to `https://portainer.example.com/`
9. Paste the `Logout URL` from Pocket ID into the `Logout URL` field in Portainer.
10. Set the `User identifier` field to `preferred_username`. (This will use the users username vs the email)
11. Set the `Scopes` field to: `email openid profile`
12. Set `Auth Style` to `Auto detect`
13. Save the settings and test the new OAuth Login.

---

// File: client-examples/proxmox-backup

# Proxmox Backup Server

The following example variables are used, and should be replaced with your actual URLs.

- `pbs.example.com` (The URL of your Proxmox instance.)
- `id.example.com` (The URL of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID create a new OIDC Client, name it, for example, `Proxmox Backup Server`.
2. Set a logo for this OIDC Client if you would like to.
3. Set the callback URL to: `https://pbs.example.com`.
4. Copy the `Client ID`, and the `Client Secret` for use in the next steps.

## Proxmox Backup Server Setup

1. Open the PBS console and navigate to: `Configuration` -> `Access Control` -> `Realms`.
2. Add a new `OpenID Connect Server` Realm.
3. Enter `https://id.example.com` for the `Issuer URL`.
4. Enter a name for the realm of your choice, for example, `PocketID`.
5. Paste the `Client ID` from Pocket ID into the `Client ID` field in PBS.
6. Paste the `Client Secret` from Pocket ID into the `Client Key` field in PBS.
7. You can check the `Default` box if you want this to be the default realm PBS uses when signing in.
8. Check the `Autocreate Users` checkbox. (This will automatically create users in PBS if they don't exist).
9. Select `username` for the `Username Claim` dropdown. (This is a personal preference and controls how the username is shown, for example: `username = username@PocketID` or `email = username@example@PocketID`).
10. Leave the rest as defaults and click `OK` to save the new realm.
11. Sign in with the Pocket ID account to create the user.

Once the user has been created in PBS, then finish the setup:

1. Sign back in as a local administrator to grant permissions per below.
2. In PBS, Edit the `PocketID` realm you created earlier.
3. Set the `Scope` to `openid profile email groups`.
4. You should now see the user groups in PBS, and you can assign permissions:
   - Navigate to `Configuration` -> `Access Control` -> `Permissions`.
   - Click on `Add` and select `User Permission`.
   - Set the `Path` to `/` for the entire datacenter or specify a specific VM or container path.
   - Select the `YourUsername@PocketID` user.
   - Set the `Role` to `Administrator`.

---

// File: client-examples/proxmox

# Proxmox

The following example variables are used, and should be replaced with your actual URLs.

- `proxmox.example.com` (The URL of your Proxmox instance.)
- `id.example.com` (The URL of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID create a new OIDC Client, name it, for example, `Proxmox`.
2. Set a logo for this OIDC Client if you would like to.
3. Set the callback URL to: `https://proxmox.example.com`.
4. Copy the `Client ID`, and the `Client Secret` for use in the next steps.

## Proxmox Setup

1. Open the Proxmox console and navigate to: `Datacenter` -> `Permissions` -> `Realms`.
2. Add a new `OpenID Connect Server` Realm.
3. Enter `https://id.example.com` for the `Issuer URL`.
4. Enter a name for the realm of your choice, for example, `PocketID`.
5. Paste the `Client ID` from Pocket ID into the `Client ID` field in Proxmox.
6. Paste the `Client Secret` from Pocket ID into the `Client Key` field in Proxmox.
7. You can check the `Default` box if you want this to be the default realm Proxmox uses when signing in.
8. Check the `Autocreate Users` checkbox. (This will automatically create users in Proxmox if they don't exist).
9. Select `username` for the `Username Claim` dropdown. (This is a personal preference and controls how the username is shown, for example: `username = username@PocketID` or `email = username@example@PocketID`).
10. Leave the rest as defaults and click `OK` to save the new realm.
11. Sign in to Proxmox with a Pocket ID user to autocreate the user account.

### User Permissions

For individual standalone user management (without groups):

- Navigate to `Datacenter` -> `Permissions`.
- Click on `Add` and select `User Permission`.
- Set the `Path` to `/` for the entire datacenter or specify a specific VM or container path.
- Select the newly created `YourPocketUsername@PocketID` account.
- Set the `Role` to `Administrator` for this account.

### Group Permissions

:::warning
This is just an example of how to setup RBAC based on OIDC Groups. You may want to adjust the roles and permissions based on your specific needs.
:::

This part is optional, but if you want to restrict access to specific groups and allow specific roles based on user groups, you can do so by following these steps:

#### Pocket ID Setup

1. In Pocket ID create two new `User Groups` for example: `Proxmox Users` and `Proxmox Admins`.
2. Add the users you want to allow access to Proxmox to these groups.
3. Under the `Proxmox` OIDC Client, select the checkbox for `Proxmox Users` and `Proxmox Admins` groups in the `Allowed User Groups` table and `Save`.

#### Proxmox Setup

1. In Proxmox, Edit the `PocketID` realm you created earlier.
2. Set the `Scope` to `openid profile email groups`.
3. Set the `Group Claim` to `groups` and `Save` the realm.
4. Set the `Autocreate Groups` checkbox to have Proxmox automatically create groups based on the groups in Pocket ID.
5. Sign in to Proxmox with a user that is in the `Proxmox Users` or `Proxmox Admins` group.
6. You should now see the user groups in Proxmox, and you can assign permissions:
   - Navigate to `Datacenter` -> `Permissions`.
   - Click on `Add` and select `Group Permission`.
   - Set the `Path` to `/` for the entire datacenter or specify a specific VM or container path.
   - Select the `Proxmox Users@PocketID` or `Proxmox Admins@PocketID` group.
   - Set the `Role` to `PVEAudit` for `Proxmox Users@PocketID`, and `Administrator` for `Proxmox Admins@PocketID`.

---

// File: client-examples/rallly

# rallly

Below URLs are used as placeholders for the rallly and Pocket ID instances. Replace them with the actual URLs.

- rallly.example.com (The url of your rallly instance.)
- pocketid.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket ID, create a new OIDC client named `rallly` (or any name you prefer).
2. (Optional) Set a logo for the OIDC client.
3. Set the callback URL to: `https://rallly.example.com/api/auth/callback/oidc`
4. Copy the `Client ID` and `Client Secret` for the next steps.

## rallly Docker Setup

If you follow the [rallly docker setup](https://support.rallly.co/self-hosting/installation/docker#setup-instructions), you are encouraged to create a `config.env` file in the root of your rallly project directory. This file will be used to set environment variables for the rallly web server container.

`config.env` file should look like this:
```env
other environment variables...

OIDC_DISCOVERY_URL=https://pocketid.example.com/.well-known/openid-configuration

OIDC_CLIENT_ID=your-client-id-here

OIDC_CLIENT_SECRET=your-client-secret-here

OIDC_ISSUER_URL=https://pocketid.example.com
```

Restart your docker containers and you should be able to login to rallly using Pocket ID.

---

// File: client-examples/rdpgw

# RDPGW 

[RDPGW](https://github.com/bolkedebruin/rdpgw) allows you to connect with the official Microsoft RDP clients to remote desktops over HTTPS.
The following example assumes you want to deploy rdpgw behind caddy reverse proxy with pocket-id.

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `rdpgw`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://rd.example.com/callback`.
4. Copy the `Client ID`, and `Client Secret` for use in the next steps.

## RDPGW Setup

rdpgw.yaml (adjust to your specific requirements):

```yaml
Server:
 Authentication:
  - openid
 Tls: disable
 GatewayAddress: https://rd.example.com
 Port: 80
 # list of acceptable desktop hosts to connect to
 Hosts:
  - unraid-vm.local:3389
  - 192.168.100.14:3389
 HostSelection: unsigned 
 SessionKey: 32-characters-long
 SessionEncryptionKey: 32-characters-long
 SessionStore: cookie
# Open ID Connect specific settings
OpenId:
 ProviderUrl: https://pocketid.example.com
 ClientId: your-client-id-from-pocket-id-for-rdpgw
 ClientSecret: your-client-secret-from-pocket-id-for-rdpgw
Caps:
 SmartCardAuth: false
 # required for openid connect
 TokenAuth: true
 IdleTimeout: 0
 EnablePrinter: true
 EnablePort: true
 EnablePnp: true
 EnableDrive: true
 EnableClipboard: true
Client:
  UsernameTemplate: "{{ username }}"
  SplitUserDomain: false
Security:
  PAATokenSigningKey: 32-characters-long
  PAATokenEncryptionKey: 32-characters-long
  UserTokenEncryptionKey: 32-characters-long
  EnableUserToken: false
  VerifyClientIp: false
```

## Caddy config

You then need to setup your caddy proxy with caddy-security and pocket-id config following the [pocket-id documentation](https://pocket-id.org/docs/guides/proxy-services#caddy).

:::note You should have two different oidc clients, one for caddy-security and one for rdpgw.  For caddy-security the callback looks like `https://example.com/auth/oauth2/generic/authorization-code-callback` and for rdpgw its: `https://rd.example.com/callback` you need both oidc clients.  For the `/auth/oath2/generic/` route this is the route that caddy-security is handling (not rdpgw, rdpgw is handling `rd.example.com/connect?host=` and then `rd.example.com/callback`). :::

```ini
  oauth identity provider generic {
    delay_start 3
    realm generic
    driver generic
    client_id your-client-id-from-pocket-id-for-caddy-security
    client_secret your-client-secret-from-pocket-id-for-caddy-security
    scopes openid email profile
    base_auth_url https://pocketid.example.com
    metadata_url https://pocketid.example.com/.well-known/openid-configuration
  }

  transform user {
    match role user
    ui link "Pocket-ID" https://pocketid.example.com/ target_blank icon "las la-id-card"
    ui link "RDPGW Unraid-vm" https://rd.example.com/connect?host=unraid-vm.local%3A3389 target_blank icon "las la-desktop"
    ui link "RDPGW My-PC" https://rd.example.com/connect?host=192.168.100.14%3A3389 target_blank icon "las la-desktop"
  }

  example.com {

	handle / {
		redir / /auth
	}
	handle /login* {
		redir * /auth/login
	}
	handle /auth* {
		authenticate with myportal
	}
	respond * "Forbidden" 403 {
		close
	}
}

  rd.example.com {
	route {
		@ws {
				header Connection *Upgrade*
				header Upgrade websocket
		}
		reverse_proxy http://rdpgw {
			# Allow non-standard HTTP methods used by RDPGW
			header_up X-HTTP-Method-Override {http.method}
			header_up X-Real-IP {remote_host}
			header_up X-Forwarded-For {remote_host}
			header_up X-Forwarded-Proto {scheme}
			header_up X-Forwarded-Host {host}
			transport http {
					versions 1.1
			}
		}
	}
}

pocketid.example.com {
	route {
		reverse_proxy http://pocket-id {
			header_up X-Real-IP {remote_host}
			header_up X-Forwarded-For {remote_host}
			header_up X-Forwarded-Proto {scheme}
			header_up X-Forwarded-Host {host}
		}
	}
	route /caddy-security/* {
		authenticate with myportal
	}
}
```

---

// File: client-examples/semaphore-ui

# Semaphore UI

1. In Pocket-ID create a new OIDC Client, name it i.e. `Semaphore UI`.
2. Set the callback URL to: `https://<your-semaphore-ui-url>/api/auth/oidc/pocketid/redirect/`.
3. Add the following to your `config.json` file for Semaphore UI:

```json
"oidc_providers": {
    "pocketid": {
        "display_name": "Sign in with PocketID",
        "provider_url": "https://<your-pocket-id-url>",
        "client_id": "<client-id-from-pocket-id>",
        "client_secret": "<client-secret-from-pocket-id>",
        "redirect_url": "https://<your-semaphore-ui-url>/api/auth/oidc/pocketid/redirect/",
        "scopes": [
            "openid",
            "profile",
            "email"
        ],
        "username_claim": "email",
        "name_claim": "given_name"
    }
}
```

---

// File: client-examples/sonarqube

# SonarQube

## Requirements

- [SonarQube Community]
- [sonar-auth-oidc] plugin v3.0.0 (or later)
- HTTPS connection to your SonarQube instance

## Create OIDC Client in Pocket ID

1. Create a new OIDC Client in Pocket ID (e.g., `sonarqube`).
2. Set the **Callback URL** to the value below:

    ```env
    https://<your-sonarqube-instance>/oauth2/callback/oidc
    ```

3. *Optional:* Download a PNG or SVG **logo** from the [SonarQube Community] and upload.
4. Copy the **Client ID**, **Client Secret**, and **OIDC Discovery URL** for use in the next section.

## Install and configure the plugin

1. Download [sonar-auth-oidc] v3.0.0 (or later) and copy it into the SonarQube *plugins* directory,
   usually `/opt/sonarqube/extensions/plugins`
2. Restart SonarQube instance.
3. Go to *Administration* -> *Configuration* -> *Security* and set the following parameters

   >- **Enabled:** `true` (*checked*)
   >- **Issuer URI:** your `OIDC Discovery URL` **without** /.well-known/openid-configuration
   >- **Client ID:** your `Client ID`
   >- **Client secret:** your `Client Secret`
   >- **Scopes:** `openid email profile groups`
   >- **Allow users to sign-up:** `true` (*checked*)  (optional but recommended)
   >- **Login generation strategy:** `Email`

## Controlling admins access with groups

To control **admin** access to SonarQube using Pocket ID groups:

1. Create your Pocket ID group.
2. Add a `Custom Claim` inside group to match SonarQube admin group.

   **Note:** Value must be a JSON array.

   >- **Key:** `sonargroups`
   >- **Value:** `["sonar-administrators"]`

3. Go to SonarQube -> *Administration* -> *Configuration* -> *Security* and set

   >- **Synchronize groups:** `true` (*checked*)
   >- **Groups claim name:** `sonargroups`

This will cause SonarQube to automatically add the members of the Pocket ID group to the SonarQube `sonar-administrators` administration group.

## Additional information

More information about [sonar-auth-oidc] can be found [here](https://github.com/sonar-auth-oidc/sonar-auth-oidc?tab=readme-ov-file#configuration).

Hint: Thanks to Pocket ID `Custom Claims` it is possible to completely manage SonarQube groups via Pocket ID.

[SonarQube Community]: <https://www.sonarsource.com/open-source-editions/sonarqube-community-edition/>
[sonar-auth-oidc]: <https://github.com/sonar-auth-oidc/sonar-auth-oidc/releases/tag/v3.0.0>

---

// File: client-examples/synology

# Synology

The following example variables are used, and should be replaced with your actual URLS.

- synology.example.com (The url of your Synology instance.)
- id.example.com (The url of your Pocket ID instance.)

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `Synology`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `https://synology.example.com/`.
4. Copy the `Client ID`, `Client Secret`, `OIDC Discovery URL` for use in the next steps.

# Synology Setup

1. Open the Synology DSM web interface and open `Control Panel`.
2. Choose `Domain/LDAP` in the left side, then choose the `SSO Client` tab at the top.
3. Below the `Services` heading, check the box for `Enable OpenID Connect SSO service`
4. Press the `OpenID Connect SSO Settings` button to open the configuration dialog.
5. Choose `Profile:` as `OIDC`.
6. Choose `Account type:` as `Domain/LDAP/local`.
7. Set `Name:` to `PocketID`.
8. Paste the `OIDC Discovery URL` from Pocket ID into the `Well-known URL` field.
9. Paste the `Client ID` from Pocket ID into the `Application ID` field.
10. Paste the `Client Secret` from Pocket ID into the `Application secret` field.
11. Set the `Redirect URL` to `https://synology.example.com`
12. Set the `Authorization scope` field to: `openid email profile`
13. Set the `Username claim` field to `preferred_username`. (This will use the users username vs the email. If the Pocket ID username matches the local Synology DSM account name, it will log in as the existing user.)
14. Press the `Save` button.
15. Press the `Apply` button on the `Control Panel` page.
16. Test the new OAuth login by logging out and logging back in again. The login page should now have a `SSO Authentication` tab that lets you `Continue with PocketID`.

---

// File: client-examples/talos

# Talos

Talos is a lightweight API driven full stack Kubernetes system. As with any Kubernetes server, you can set it up to
authenticate users using OIDC. This guide details configuring Talos to use Pocket ID as the Authentication and Authorization server

## Pocket ID Setup

1. In Pocket-ID create a new OIDC Client, name it i.e. `Kubernetes`.
2. Set a logo for this OIDC Client if you would like too.
3. Set the callback URL to: `http://localhost:8000`.
4. Copy the `Client ID`, and the `Client Secret` for use in the next steps.

## Talos setup

Modify the `cluster.apiServer` block to include the below

```diff
cluster:
    apiServer:
        image: registry.k8s.io/kube-apiserver:v1.33.1 # The container image used in the API server manifest.
+       extraArgs:
+           oidc-issuer-url: <url of pocket-id>
+           oidc-client-id: <Client ID from Pocket ID>
+           oidc-username-claim: sub
+           oidc-groups-claim: groups
+           oidc-groups-prefix: "oidc:"
```

Create a Cluster role binding linking the admin group you wish to have in to Kubernetes. In the below example, there is a group
called `kubernetes` in Pocket ID that our user is assigned to

```yaml
# filename=crb.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admins-from-pass-keys
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: oidc:kubernetes
```

Apply this 

```shell
kubectl apply -f crb.yaml
```

### Modify Kubeconfig file

You will need to install a command line tool [kubelogin](https://github.com/int128/kubelogin) - Refer to the github repo for
instructions related to your system.

Run the below command to generate a config and validate the token is working

```shell
kubectl oidc-login setup \
--oidc-issuer-url=<pocket ID url> \
--oidc-client-id=<client ID> \
--oidc-client-secret=<client secret> \
--oidc-extra-scope=groups,email,name,sub,email_verified
```

You need to ensure that your email is verified as [Kubernetes requires this](https://github.com/kubernetes/kubernetes/blob/77bd3f89fbc389d5dfebbed880e08a1e4949312c/staging/src/k8s.io/apiserver/plugin/pkg/authenticator/token/oidc/oidc.go#L833-L847)
when working with OIDC

You _should_ get a response similar to

```json
{
  "aud": "a60960a8-c856-43b7-add7-50d83bf7eeab",
  "email": "username@domain.com",
  "email_verified": true,
  "exp": 1749867571,
  "groups": [
    "kubernetes"
  ],
  "iat": 1749863971,
  "iss": "<Pocket ID url>",
  "nonce": "sLY0SUaiLxe9JDfUpNEsBDbhKceOB-T1zxxRYJPQbvk",
  "sub": "643c3fba-370a-4738-92a6-9ergec96cd99"
}
```

Create a new user in your `~/.kube/config` file with the below

```yaml
- name: pocket-id
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
        - oidc-login
        - get-token
        - --oidc-issuer-url=<pocket ID url>
        - --oidc-client-id=<pocket ID url>
        - --oidc-client-secret=<pocket ID url>
        - --oidc-extra-scope=groups
        - --oidc-extra-scope=email
        - --oidc-extra-scope=name
```

Then update your current context to use this user

```diff
 - context:
     cluster: testing
     namespace: default
-    user: admin@testng
+    user: pocket-id
    name: testing
```

## Further Reading

* [Kubernetes OIDC](https://kubernetes.io/docs/reference/access-authn-authz/authentication/)
* [More indepth documentation and possible errors](https://documentation.breadnet.co.uk/kubernetes/oidc/talos-oidc-pocket-id/)

---

// File: client-examples/vikunja

# Vikunja

1. In Pocket-ID create a new OIDC Client, name it i.e. `Vikunja`
2. Set the callback url to: `https://<your-vikunja-subdomain>.<your-domain>/auth/openid/pocketid`
3. In `Vikunja` ensure to map a config file to your container, see [here](https://vikunja.io/docs/config-options/#using-a-config-file-with-docker-compose)
4. Add or set the following content to the `config.yml` file:

```yml
auth:
  openid:
    enabled: true
    redirecturl: https://<your-vikunja-subdomain>.<your-domain>/auth/openid/pocketid
    providers:
      - name: Pocket-Id
        authurl: https://<your-pocket-id-subdomain>.<your-domain>
        clientid: <client id from the created OIDC client>
        clientsecret: <client secret from the created OIDC client>
```

---

// File: client-examples/wekan

# Wekan

## Requirements

- [Wekan](https://github.com/wekan/wekan)
- HTTPS connection to your Wekan server

## Create OIDC Client in Pocket ID
1. Create a new OIDC Client in Pocket ID (e.g., `wekan`).
2. Set the **Callback URL** to the value below:
    ```
    https://<wekan-url>/_oauth/oidc
    ```
3. *Optional:* Download a PNG or SVG **logo** from the [Wekan project](https://github.com/wekan/wekan) and upload.
4. Copy the **Client ID**, and **Client Secret** for use in the next section.


## Configure Wekan env variables

Use the following `environment` variables to configure OpenID (Docker shown):

```yaml
services:
...
  wekan:
    ...
    environment:
      - OAUTH2_ENABLED=true
      - OIDC_REDIRECTION_ENABLED=true # for mandatory
      - OAUTH2_LOGIN_STYLE=popup # or redirect
      - OAUTH2_CLIENT_ID=xxxxx-xxxxx-xxxxx
      - OAUTH2_SECRET=xxxxx-xxxxx-xxxxx
      - OAUTH2_SERVER_URL=https://pocket-id.tld
      - OAUTH2_AUTH_ENDPOINT=/authorize
      - OAUTH2_USERINFO_ENDPOINT=/api/oidc/userinfo
      - OAUTH2_TOKEN_ENDPOINT=/api/oidc/token
      - OAUTH2_ID_MAP=preferred_username
      - OAUTH2_FULLNAME_MAP=name
      - OAUTH2_USERNAME_MAP=preferred_username
      - OAUTH2_EMAIL_MAP=email
...
```

After configuration is tested and working, you can adjust a few other OpenID settings in the gui at **Admin Panel > Settings Layout**:



## Notes

Configuration adapted from the [Authentik guide for Wekan](https://docs.goauthentik.io/integrations/services/wekan/#wekan-configuration). Tested and working in Wekan `v7.90`.

---

// File: configuration/environment-variables

# Environment Variables

Below are all the environment variables supported by Pocket ID. These should be configured in your `.env ` file.

Be cautious when modifying environment variables that are not recommended to change.

<div className="env-var-table">

| Variable               | Default Value                                                                                           | Recommended to change | Description                                                                                                                                                                                                                                                                                                                                                               |
| ---------------------- | ------------------------------------------------------------------------------------------------------- | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `APP_URL`              | `http://localhost:1411`                                                                                 | yes                   | The URL where you will access the app.                                                                                                                                                                                                                                                                                                                                    |
| `TRUST_PROXY`          | `false`                                                                                                 | yes                   | Whether the app is behind a reverse proxy.                                                                                                                                                                                                                                                                                                                                |
| `MAXMIND_LICENSE_KEY`  | `-`                                                                                                     | yes                   | License Key for the GeoLite2 Database. The license key is required to retrieve the geographical location of IP addresses in the audit log. If the key is not provided, IP locations will be marked as "unknown." You can obtain a license key for free [here](https://www.maxmind.com/en/geolite2/signup).                                                                |
| `PUID` and `PGID`      | `1000`                                                                                                  | yes                   | The user and group ID of the user who should run Pocket ID inside the Docker container and owns the files that are mounted with the volume. You can get the `PUID` and `GUID` of your user on your host machine by using the command `id`. For more information see [this article](https://docs.linuxserver.io/general/understanding-puid-and-pgid/#using-the-variables). |
| `DB_PROVIDER`          | `sqlite`                                                                                                | no                    | The database provider you want to use. Currently `sqlite` and `postgres` are supported.                                                                                                                                                                                                                                                                                   |
| `DB_CONNECTION_STRING` | `file:data/pocket-id.db?_pragma=journal_mode(WAL)&_pragma=busy_timeout(2500)&_txlock=immediate` | no | Specifies the connection string used to connect to the database.<br/>See the [Database connection string](#database-connection-string) section below for more details. |
| `UPLOAD_PATH`          | `data/uploads`                                                                                          | no                    | The path where the uploaded files are stored.                                                                                                                                                                                                                                                                                                                             |
| `KEYS_STORAGE` | `file`| no | Location where to store the private keys: `file` (default) or `database` (requires an encryption key).|
| `ENCRYPTION_KEY` | `-` | yes | Key used to encrypt data, including the private keys. It's recommended to use a random sequence of characters, for example generated with `openssl rand -base64 32`<br/>See the [Encryption keys](#encryption-keys) section below for more details. |
| `ENCRYPTION_KEY_FILE` | `-` | yes | Alternative to passing the encryption key with the `ENCRYPTION_KEY` variable, set to the path of a file containing a random encryption key. |
| `KEYS_PATH` | `data/keys` | no | When `KEYS_STORAGE` is `file`, this is the path where the private keys are stored.|
| `GEOLITE_DB_PATH`      | `data/GeoLite2-City.mmdb`                                                                               | no                    | The path where the GeoLite2 database should be stored.                                                                                                                                                                                                                                                                                                                    |
| `GEOLITE_DB_URL`       | `https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=%s&suffix=tar.gz` | no                    | The custom download URL for the Geolite DB (default value should be fine for most users.)                                                                                                                                                                                                                                                                                 |
| `PORT`                 | `1411`                                                                                                  | no                    | The port on which Pocket ID should listen.                                                                                                                                                                                                                                                                                                                                |
| `HOST`                 | `0.0.0.0`                                                                                               | no                    | The address on which Pocket ID should listen.
| `UNIX_SOCKET`          | `-`                                                                                                     | no                    | The Unix socket path on which Pocket ID should listen. When set, the server will use a Unix socket instead of TCP, and the `PORT`/`HOST` parameters are ignored.                                                                                                                                                                                                          |
| `UNIX_SOCKET_MODE`     | `-`                                                                                                     | no                    | The Unix socket mode. Only takes effect when `UNIX_SOCKET` is set.                                                                                                                                                                                                                                                                                                        |                                                                                                                                                                                                                                                                                                                             |
| `LOCAL_IPV6_RANGES`      | `-`                                                                               | no                    | User configured local IPv6 ranges for the audit log.                                                                                                                                                                                                                                                                                                                     |
| `UI_CONFIG_DISABLED`   | `false`                                                                                                 | no                    | See [Overriding the UI configuration](#overriding-the-ui-configuration).                                                                                                                                                                                                                                                                                                  |
| `ANALYTICS_DISABLED`   | `false`                                                                                                 | no                    | Disable heartbeat that gets sent every 24 hours to count how many Pocket ID instances are running. Read more [about analytics](/docs/configuration/analytics).                                                                                                                                                                                                            |

</div>

### Database connection string

The `DB_CONNECTION_STRING` environmental variable configures how Pocket ID connects to the database.

When using **SQLite** (`DB_PROVIDER=sqlite`, the default), this contains the path to the database file as well as some additional parameters. Most users should not modify the default value `file:data/pocket-id.db?_pragma=journal_mode(WAL)&_pragma=busy_timeout(2500)&_txlock=immediate`.

> We **do NOT recommend** storing the SQLite database inside a networked filesystem, such as a NFS or SMB share. However, if you absolutely must, and are [aware of the risks](https://www.sqlite.org/useovernet.html), you need to modify `DB_CONNECTION_STRING` and disable journaling, by setting `_journal_mode=DELETE`. Note that this is not a recommended or supported scenario by the SQLite developers, and you should ensure to have proper backups for your database.

When using **PostgreSQL** (`DB_PROVIDER=postgres`), the connection string is a DSN as supported by libpq:

```
Format:
postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]

Example:
postgres://pocketid:123456@localhost:5432/pocketid
```

### Encryption keys

We recommend setting an encryption key so Pocket ID can encrypt sensitive data, such as the token signing keys. Additionally, providing an encryption key is required when you want to store the token signing keys in the database (`KEYS_STORAGE=database`).

A good encryption key is a 32-characters-long random string. You can generate one using tools like OpenSSL:

```sh
openssl rand -base64 32
```

You can pass the encryption key to Pocket ID in two ways:

1. Set its value in the `ENCRYPTION_KEY` variable directly
2. Save it to a file mounted inside the container and set `ENCRYPTION_KEY_FILE` to its path. This also works with Docker Secrets.

## Overriding the UI configuration

You can change additional settings directly in the Pocket ID UI. However, if you prefer to configure them via environment variables, you can do so by setting the following variables.

To enable environment variable overrides, set `UI_CONFIG_DISABLED` to `true`. When `UI_CONFIG_DISABLED` is set to true, Pocket ID will use values from the environment variables. If a variable is not set, the system will fall back to its default values.

| Variable                                           | Default Value                | Description                                                                                                                                                                       |
| -------------------------------------------------- | ---------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `APP_NAME`                                         | `Pocket ID`                  | The name of the app.                                                                                                                                                              |
| `SESSION_DURATION`                                 | `60`                         | The duration of a session in minutes before the user has to sign in again.                                                                                                        |
| `EMAILS_VERIFIED`                                  | `false`                      | Whether the user's email should be marked as verified for the OIDC clients.                                                                                                       |
| `ALLOW_OWN_ACCOUNT_EDIT`                           | `true`                       | Whether the users should be able to edit their own account details.                                                                                                               |
| `ALLOW_USER_SIGNUPS`                               | `disabled`                      | Weather the User signup functionality is enabled. Valid Values: `disabled`, `withToken`, `open`                                                                                                                                  |
| `DISABLE_ANIMATIONS`                               | `false`                      | Turn off all animations throughout the Admin UI.                                                                                                                                  |
| `ACCENT_COLOR`                                     | `default`                    | A custom accent color for the UI. Accepts any valid CSS color value such as hex, RGB or HSL.                                                                                      |
| `SMTP_HOST`                                        | `-`                          | SMTP server hostname.                                                                                                                                                             |
| `SMTP_PORT`                                        | `-`                          | SMTP server port.                                                                                                                                                                 |
| `SMTP_FROM`                                        | `-`                          | Sender email address for outgoing emails. Format: `user@example.com`                                                                                                                                         |
| `SMTP_USER`                                        | `-`                          | SMTP username for authentication.                                                                                                                                                 |
| `SMTP_PASSWORD`                                    | `-`                          | SMTP password for authentication.                                                                                                                                                 |
| `SMTP_TLS`                                         | `none`                       | Which TLS Option to use. Valid values are: `none`, `starttls` and `tls`.                                                                                                          |
| `SMTP_SKIP_CERT_VERIFY`                            | `false`                      | Whether to skip SMTP certificate verification. This can be useful for self-signed certificates.                                                                                   |
| `EMAIL_LOGIN_NOTIFICATION_ENABLED`                 | `false`                      | Send an email to the user when they log in from a new device.                                                                                                                     |
| `EMAIL_ONE_TIME_ACCESS_AS_ADMIN_ENABLED`           | `false`                      | Allows an admin to send a login code to the user via email.                                                                                                                       |
| `EMAIL_API_KEY_EXPIRATION_ENABLED`                 | `false`                      | Send an email to the user when their API key is about to expire.                                                                                                                  |
| `EMAIL_ONE_TIME_ACCESS_AS_UNAUTHENTICATED_ENABLED` | `false`                      | Allows users to bypass passkeys by requesting a login code sent to their email. This reduces the security significantly as anyone with access to the user's email can gain entry. |
| `LDAP_ENABLED`                                     | `false`                      | Whether LDAP authentication is enabled.                                                                                                                                           |
| `LDAP_URL`                                         | `-`                          | LDAP server URL.                                                                                                                                                                  |
| `LDAP_BIND_DN`                                     | `-`                          | LDAP bind distinguished name (DN).                                                                                                                                                |
| `LDAP_BIND_PASSWORD`                               | `-`                          | LDAP bind password.                                                                                                                                                               |
| `LDAP_BASE`                                        | `-`                          | LDAP search base DN.                                                                                                                                                              |
| `LDAP_USER_SEARCH_FILTER`                          | `(objectClass=person)`       | LDAP user search filter.                                                                                                                                                          |
| `LDAP_USER_GROUP_SEARCH_FILTER`                    | `(objectClass=groupOfNames)` | The Search filter to use to search/sync groups.                                                                                                                                   |
| `LDAP_SKIP_CERT_VERIFY`                            | `false`                      | Whether to skip LDAP certificate verification. This can be useful for self-signed certificates.                                                                                   |
| `LDAP_SOFT_DELETE_USERS`                           | `false`                      | When enabled, users removed from LDAP will be disabled rather than deleted from the system.                                                                                       |
| `LDAP_ATTRIBUTE_USER_UNIQUE_IDENTIFIER`            | `-`                          | LDAP attribute for user unique identifier. The value of this attribute should never change.                                                                                       |
| `LDAP_ATTRIBUTE_USER_USERNAME`                     | `-`                          | LDAP attribute for user username.                                                                                                                                                 |
| `LDAP_ATTRIBUTE_USER_EMAIL`                        | `-`                          | LDAP attribute for user email.                                                                                                                                                    |
| `LDAP_ATTRIBUTE_USER_FIRST_NAME`                   | `-`                          | LDAP attribute for user first name.                                                                                                                                               |
| `LDAP_ATTRIBUTE_USER_LAST_NAME`                    | `-`                          | LDAP attribute for user last name.                                                                                                                                                |
| `LDAP_ATTRIBUTE_USER_PROFILE_PICTURE`              | `-`                          | LDAP attribute for the profile picture of a user.                                                                                                                                 |
| `LDAP_ATTRIBUTE_GROUP_MEMBER`                      | `member`                     | LDAP attribute to use for querying members of a group.                                                                                                                            |
| `LDAP_ATTRIBUTE_GROUP_UNIQUE_IDENTIFIER`           | `-`                          | LDAP attribute for group unique identifier. The value of this attribute should never change.                                                                                      |
| `LDAP_ATTRIBUTE_GROUP_NAME`                        | `-`                          | LDAP attribute for group name.                                                                                                                                                    |
| `LDAP_ATTRIBUTE_ADMIN_GROUP`                       | `-`                          | Name of the admin group. Members of this group will have Admin Privileges in Pocket ID.                                                                                           |

## Observability

You can configure Pocket ID to emit metrics and/or traces. This is done using OpenTelemetry. For metrics, Prometheus is also supported.

| Variable          | Default Value | Description                    |
| ----------------- | ------------- | ------------------------------ |
| `TRACING_ENABLED` | `false`       | Enables OpenTelemetry tracing. |
| `METRICS_ENABLED` | `false`       | Enables OpenTelemetry metrics. |

The behaviour of metrics, traces and which metric and trace exporters are enabled can be controlled using the `OTEL` environment variables. These are documented in the [OpenTelemetry SDK environment variables documentation](https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/).

If you want to enable the `/metrics` endpoint for Prometheus metrics scraping instead of using OTLP metrics pushing, you'll need to also set:

```
OTEL_METRICS_EXPORTER=prometheus
```

This will start a **second** HTTP server with just the metrics endpoint. It is by default bound to:

- `OTEL_EXPORTER_PROMETHEUS_HOST`: `localhost`
- `OTEL_EXPORTER_PROMETHEUS_PORT`: `9464`

---

// File: configuration/allowed-groups

# OIDC Client Allowed Groups

Pocket ID allows you to restrict access to OIDC Clients to specific user groups. This can be useful when you want to restrict access to certain applications to specific users.

By default, all users are allowed to access all OIDC Clients. To restrict access to specific user groups, follow the steps below:

1. Navigate to the `OIDC Clients` section in the Pocket ID admin dashboard.
2. Click the edit (pencil) icon on the OIDC client you wish to restrict.
3. Expand the `Allowed User Groups` section.
4. Select the Group(s) you want to allow access to this OIDC Client and save your changes.
5. Now only users in the selected group(s) will be allowed to access that specific client.

---

// File: configuration/ldap

# LDAP Synchronization

Pocket ID can sync users and groups from an LDAP Source (lldap, OpenLDAP, Active Directory, etc.).

### LDAP Sync

- The LDAP Service will sync on Pocket ID startup and every hour once enabled from the Web UI.
- Users or groups synced from LDAP can **NOT** be edited from the Pocket ID Web UI.

### Generic LDAP Setup

1. Follow the installation guide [here](/docs/setup/installation).
2. Once you have signed in with the initial admin account, navigate to the Application Configuration section at `https://pocket.id/settings/admin/application-configuration`.
3. Client Configuration Setup

| LDAP Variable            | Example Value                      | Description                                                   |
| ------------------------ | ---------------------------------- | ------------------------------------------------------------- |
| LDAP URL                 | ldaps://ldap.mydomain.com:636      | The URL with port to connect to LDAP                          |
| LDAP Bind DN             | cn=admin,ou=users,dc=domain,dc=com | The full DN value for the user with search privileges in LDAP |
| LDAP Bind Password       | securepassword                     | The password for the Bind DN account                          |
| LDAP Search Base         | dc=domain,dc=com                   | The top-level path to search for users and groups             |
| User Search Filter       | (objectClass=person)               | The filter to use to search for users from LDAP               |
| User Group Search Filter | (objectClass=groupOfNames)         | The filter to use to search for groups from LDAP              |

<br />

4. LDAP Attribute Configuration Setup

| LDAP Variable                     | Example Value      | Description                                                                      |
| --------------------------------- | ------------------ | -------------------------------------------------------------------------------- |
| User Unique Identifier Attribute  | uuid               | The LDAP attribute to uniquely identify the user, **this should never change**   |
| Username Attribute                | uid                | The LDAP attribute to use as the username of users                               |
| User Mail Attribute               | mail               | The LDAP attribute to use for the email of users                                 |
| User First Name Attribute         | givenName          | The LDAP attribute to use for the first name of users                            |
| User Last Name Attribute          | sn                 | The LDAP attribute to use for the last name of users                             |
| Group Members Attribute           | member             | The LDAP attribute to use for querying members of a group.                       |
| Group Unique Identifier Attribute | uuid               | The LDAP attribute to uniquely identify the groups, **this should never change** |
| Group Name Attribute              | uid                | The LDAP attribute to use as the name of synced groups                           |
| Admin Group Name                  | \_pocket_id_admins | The group name to use for admin permissions for LDAP users                       |

---

// File: configuration/analytics

# Analytics

By default Pocket ID sends a heartbeat to our analytics server once every 24 hours. Seeing how many active Pocket ID instances are out there genuinely motivates our team to keep developing and maintaining the project. The instance count is also displayed on the [Pocket ID website](https://pocket-id.org).

## What We Collect

Only minimal, non-identifiable data is collected:

- **Instance ID**: A random UUID (not linked to any personal information)
- **Version**: Your Pocket ID version
- **Heartbeat timestamps**: When your instance was first/last seen

We do not log or store IP addresses, user agents, or any other potentially identifiable information. The source code of the [analytics server](https://github.com/pocket-id/analytics) is open source.

## Opting Out

Analytics can be disabled at any time by setting the environment variable `ANALYTICS_DISABLED` to `true`. When disabled, no data is sent to our servers.

## Public Statistics

Aggregated instance counts are displayed on our homepage. The API is publicly accessible, the docs can be found in the[ analytics server repository](https://github.com/pocket-id/analytics).

---

// File: guides/proxy-services

# Proxy Services

The goal of Pocket ID is to function exclusively as an OIDC provider. As such, we don't have a built-in proxy provider. However, most proxies provide some sort of mechanism to support OIDC authentication provider.

Almost every reverse proxy supports protecting your services with OIDC. For ones not documented here, you should be able to find instructions in the proxy's documentation.

- [Tinyauth](#tinyauth)
- [Caddy](#caddy)
- [OAuth2 Proxy](#oauth2-proxy)
- [Traefik](#traefik)

We would really appreciate your contributions to this documentation, whether by adding instructions or linking to existing resources for configuring your reverse proxy with Pocket ID.

## Tinyauth

[Tinyauth](https://tinyauth.app/) is a lightweight authentication middleware designed specifically for homelabs. Currently it integrates with Traefik, Caddy and Nginx Proxy Manager.

Refer to the official [Tinyauth Pocket ID documentation](https://tinyauth.app/docs/guides/pocket-id.html) for detailed instructions on how to set up Tinyauth with Pocket ID.

## Caddy

With [caddy-security](https://github.com/greenpau/caddy-security) you can easily protect your services with Pocket ID.

### 1. Create a new OIDC client in Pocket ID.

Create a new OIDC client in Pocket ID by navigating to `https://<your-domain>/settings/admin/oidc-clients`. Now enter `https://<domain-of-proxied-service>/caddy-security/oauth2/generic/authorization-code-callback` as the callback URL. After adding the client, you will obtain the client ID and client secret, which you will need in the next step.

### 2. Install caddy-security

Run the following command to install caddy-security:

```bash
caddy add-package github.com/greenpau/caddy-security
```

### 3. Create your Caddyfile

```bash
{
  	# Port to listen on
	http_port 443

  	# Configure caddy-security.
	order authenticate before respond
	security {
		oauth identity provider generic {
			delay_start 3
			realm generic
			driver generic
			client_id client-id-from-pocket-id # Replace with your own client ID
			client_secret client-secret-from-pocket-id # Replace with your own client secret
			scopes openid email profile
			base_auth_url http://localhost
			metadata_url http://localhost/.well-known/openid-configuration
		}

		authentication portal myportal {
			crypto default token lifetime 3600 # Seconds until you have to re-authenticate
			enable identity provider generic
			cookie insecure off # Set to "on" if you're not using HTTPS
			# cookie domain service.example.com - If using multiple clients/portals you have to set the cookie domain for each one so they do not conflict when trying to refresh the session.

			transform user {
				match realm generic
				action add role user
			}
		}

		authorization policy mypolicy {
			set auth url /caddy-security/oauth2/generic
			allow roles user
			inject headers with claims
		}
	}
}

https://<domain-of-your-service> {
	@auth {
		path /caddy-security/*
    }

	route @auth {
		authenticate with myportal
	}

	route /* {
		authorize with mypolicy
		reverse_proxy http://<service-to-be-proxied>:<port> # Replace with your own service
	}
}
```

For additional configuration options, refer to the official [caddy-security documentation](https://docs.authcrunch.com/docs/intro).

### 4. Start Caddy

```bash
caddy run --config Caddyfile
```

#### 5. Access the service

Your service should now be protected by Pocket ID.

## OAuth2 Proxy

[OAuth2 Proxy](https://oauth2-proxy.github.io/oauth2-proxy/) can be used as either as a standalone reverse proxy much like any of the other reverse proxies, or it can be used as an authentication only middleware.

### Docker Installation

#### 1. Add OAuth2 proxy to the service that should be proxied.

To configure OAuth2 Proxy with Pocket ID, you have to add the following service to the service that should be proxied. E.g., if [Uptime Kuma](https://github.com/louislam/uptime-kuma) should be proxied, you can add the following service to the `docker-compose.yml` of Uptime Kuma:

```yaml
# Example with Uptime Kuma
# uptime-kuma:
#  image: louislam/uptime-kuma
oauth2-proxy:
  image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
  command: --config /oauth2-proxy.cfg
  volumes:
    - "./oauth2-proxy.cfg:/oauth2-proxy.cfg"
  ports:
    - 4180:4180
```

#### 2. Create a new OIDC client in Pocket ID.

Create a new OIDC client in Pocket ID by navigating to `https://<your-domain>/settings/admin/oidc-clients`. Now enter `https://<domain-of-proxied-service>/oauth2/callback` as the callback URL. After adding the client, you will obtain the client ID and client secret, which you will need in the next step.

#### 3. Create a configuration file for OAuth2 Proxy.

Create a configuration file named `oauth2-proxy.cfg` in the same directory as your `docker-compose.yml` file of the service that should be proxied (e.g. Uptime Kuma). This file will contain the necessary configurations for OAuth2 Proxy to work with Pocket ID.

Here is the recommend `oauth2-proxy.cfg` configuration:

```cfg
# Replace with your own credentials
client_id="client-id-from-pocket-id"
client_secret="client-secret-from-pocket-id"
oidc_issuer_url="https://<your-pocket-id-domain>"

# Replace with a secure random string
cookie_secret="random-string"

# Upstream servers (e.g http://uptime-kuma:3001)
upstreams="http://<service-to-be-proxied>:<port>"

# Additional Configuration
provider="oidc"
scope = "openid email profile groups"

# If you are using a reverse proxy in front of OAuth2 Proxy
reverse_proxy = true

# Email domains allowed for authentication
email_domains = ["*"]

# If you are using HTTPS
cookie_secure="true"

# With HTTPS use "__Host-" or "__Secure-" prefix, otherwise leave blank
cookie_name="__Host-oauth2-proxy"

# Listen on all interfaces
http_address="0.0.0.0:4180"
```

For additional configuration options, refer to the official [OAuth2 Proxy documentation](https://oauth2-proxy.github.io/oauth2-proxy/configuration/overview).

#### 4. Start the services.

After creating the configuration file, you can start the services using Docker Compose:

```bash
docker compose up -d
```

#### 5. Access the service.

You can now access the service through OAuth2 Proxy by visiting `http://localhost:4180`.

### Standalone Installation

Setting up OAuth2 Proxy with Pocket ID without Docker is similar to the Docker setup. As the setup depends on your environment, you have to adjust the steps accordingly but is should be similar to the Docker setup.

You can visit the official [OAuth2 Proxy documentation](https://oauth2-proxy.github.io/oauth2-proxy/installation) for more information.

## Traefik

[Traefik](https://traefik.io/traefik/) does not have built-in support for OIDC, but there are many [plugins](https://plugins.traefik.io/plugins) available that add support.

[Traefik OpenID Connect Middleware](https://plugins.traefik.io/plugins/66b63d12d29fd1c421b503f5/oidc-authentication) works with Pocket ID. See the [Pocket ID configuration docs](https://traefik-oidc-auth.sevensolutions.cc/docs/identity-providers/pocket-id) for Pocket ID specific instructions, and [Getting Started](https://traefik-oidc-auth.sevensolutions.cc/docs/getting-started) for more details on how to apply the configuration to a specific endpoint.

Traefik Enterprise has an [OIDC middleware](https://doc.traefik.io/traefik-enterprise/middlewares/oidc/) out of the box if you happen to be using that. It is similar to configure.

---

// File: guides/oidc-client-authentication

# OIDC Client authentication

In the context of OAuth2 / OpenID Connect, "Clients" refers to applications that request access to protected resources. In Pocket ID, they are configured in the *OIDC Clients* section in the *Settings* portal.

Typically OIDC Clients have a set of credentials that include:

- Client ID: in Pocket ID, this is a UUID that identifies the client (application)
- Client Secret: a shared secret, which in Pocket ID is a randomly-generated sequence of characters

When using OAuth2 with flows such as the "authorization code flow", the most common one for confidential (non-public) clients, in the last step your application exchanges an authorization code for an access token by invoking Pocket ID's `/token` endpoint, and including its client ID and secret in the request.

## Shared secrets and security

Client secrets are a kind of "shared secret", which means it is known to both the client (your application) and Pocket ID. It's a very important secret that must be protected.

Just like with all secrets, however, managing the client secret correctly can be hard. In fact, [OWASP's 2025 list of "Top 10 Non-Human Identities Risks"](https://owasp.org/www-project-non-human-identities-top-10/2025/top-10-2025/) includes "secret leakage" in the second position. In practice, managing secrets, especially shared ones, is hard, and even seasoned DevOps professionals can sometimes make mistakes.

Thankfully, OAuth2 includes alternatives to shared secrets for authenticating clients (applications). This is supported in Pocket ID starting with version 1.3.0, with Federated Client Credentials.

## Using Federated Client Credentials

With Federated Client Credentials, OIDC clients can authenticate themselves (e.g. during the exchange of the authorization code for an access token when invoking the `/token` endpoint) using JWT tokens signed by third-party Identity Providers (IdP).

> Support for Federated Client Credentials in Pocket ID is based on [RFC 7523](https://datatracker.ietf.org/doc/html/rfc7523)

To use Federated Client Credentials:

- You will need an external IdP that can authenticate your application by issuing JWT tokens, for example:
  - On apps running on Kubernetes, you can use service account tokens that are issued by the Kubernetes API server
  - On cloud providers like AWS, Microsoft Azure, GCP, etc, you can use tokens issued by the cloud platform itself (e.g. AWS IAM Roles, Microsoft Entra Workload ID / Managed Identity, etc)
  - [SPIFFE/SPIRE](https://spiffe.io/) 
  - Any other OIDC-compliant IdP
- Your application must support using JWTs for client authentication, as per [RFC 7523 section 2.2](https://datatracker.ietf.org/doc/html/rfc7523#section-2.2). You will need to ensure that your application can obtain a JWT from the external IdP in an appropriate way (see below for some examples), and that you use that token as client assertion during the OAuth2 token exchange.

> To use Federated Client Credentials during the OAuth2 token exchange, your application will need to invoke the `/token` endpoint as per usual (including `grant_type=authorization_code` and the other parameters). However, instead of including a `client_secret`, you need to pass these two options:
>
> - `client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer` (this is a constant value)
> - `client_assertion=<jwt-token>` replacing `<jwt-token>` with the token issued by the external IdP

## Configuring a client for Federated Client Credentials in Pocket ID

When editing a client in Pocket ID (in the *OIDC Clients* section in the *Settings* page), you can configure Federated Client Credentials for the client.

> Federated Client Credentials may be hidden under *Advanced Options* by default.

Each identity allows specifying:

- **Issuer** (required): Must map to the value of the `iss` claim in the JWT tokens issued by the external IdP.
- **Audience**  (optional): Must map to the value of the `aud` claim in the JWT tokens.  
  If empty, this defaults to the public URL of Pocket ID.
- **Subject**  (optional): Must map to the value of the `sub` claim in the JWT tokens.  
  If empty, this defaults to the ID of the OIDC client in Pocket ID (the UUID).
- **JWKS URL**  (optional): URL where the JWKS (JSON Web Key Set) document can be retrieved.  
  If empty, this defaults to `<issuer>/.well-known/jwks.json`.  
  > Note: while HTTP URLs are accepted, using HTTPS is strongly recommended for security.

### Kubernetes Service Account Tokens

Using Kubernetes 1.21 or higher, you can use Projected Token Volumes to have the Kubernetes API server issue a token for the audience of your choice, and make it available to your app as projected volume.

Configuration values for using Kubernetes are:

- **Issuer**: Value of the Kubernetes' API server's issuer (this is generally passed as the value of the `--service-account-issuer` flag for `kube-apiserver`).
- **Audience**: Value of the `audience` option specified when creating the Service Account for the Pod. While you can set this to any value, a good option is to use the public URL of Pocket ID.
- **Subject**: The value is in the format `system:serviceaccount:<namespace>:<service-account-name>`. E.g. for a *ServiceAccount* resource named `my-sa` in the namespace `myappns`, the value is `system:serviceaccount:myappns:my-sa`.
- **JWKS URL** (optional): The URL where the JWKS of the Kubernetes API server can be retrieved from. The default value is `<issuer>/.well-known/jwks.json`.

Inside your application, you can obtain a JWT token to use as client assertion by reading the file where the projected token volume is mounted.

Additional resources:

- Kubernetes docs: [Configure Service Accounts for Pods](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)
- Kubernetes docs: [Projected Volumes for `serviceAccountToken`](https://kubernetes.io/docs/concepts/storage/projected-volumes/#serviceaccounttoken)

### Microsoft Azure

On Microsoft Azure, you can use Microsoft Entra Workload ID (e.g. Managed Identity or Workload Identity) to federate with Pocket ID.

Set up steps for Azure:

1. Assign an identity to your application, such as a System-assigned or User-assigned Identity. [Instructions](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/overview) are specific to each service being used.
   - For workloads running on Azure Kubernetes Service, you may want to use [Workload Identity](https://learn.microsoft.com/en-us/azure/aks/workload-identity-overview)
2. Create an application in Microsoft Entra ID ([docs](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app))
   - Take note of the client ID of this app, which will be a UUID
   - Configure the Entra ID app with Federated credentials for the Managed Identity created for your resource ([docs](https://learn.microsoft.com/en-us/entra/workload-id/workload-identity-federation))

Configuration values for Federated Client Credentials in Pocket ID:

- **Issuer**: `https://sts.windows.net/<tenant-id>/` where `<tenant-id>` is the UUID of your Microsoft Entra ID tenant
- **Audience**: The client ID of the Entra ID application created above
- **Subject**: The object ID of the managed identity (note: this is the _object_ (or _principal_) ID, not a client ID)
- **JWKS URL**: Constant value `https://login.microsoftonline.com/common/discovery/keys`

Inside your application, you can [obtain a token](https://learn.microsoft.com/en-us/entra/identity/managed-identities-azure-resources/how-to-use-vm-token) from the Managed Identity by:

- Recommended: using one of the Azure SDKs to get a token from Managed Identity, with the requested *resource* as the client ID of the Entra ID application. SDKs work on all Azure services automatically.
- Manually invoking the endpoint metadata service. The endpoint can be different depending on the Azure service; in the case of an Azure Virtual Machine, the URL is `http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=<client-id>` (where `<client-id>` is the client ID of the Entra ID application); make sure to also set the HTTP header `Metadata:true` in the request.

---

// File: helping-out/contributing

# Contributing

I am happy that you want to contribute to Pocket ID and help to make it better! All contributions are welcome, including issues, suggestions, pull requests and more.

## Getting started

You've found a bug, have suggestion or something else, just create an issue on GitHub and we can get in touch.

## Submit a Pull Request

Before you submit the pull request for review please ensure that

- The pull request naming follows the [Conventional Commits specification](https://www.conventionalcommits.org):

  `<type>[optional scope]: <description>`

  example:

  ```
  fix: hide global audit log switch for non admin users
  ```

  Where `TYPE` can be:

  - **feat** - is a new feature
  - **doc** - documentation only changes
  - **fix** - a bug fix
  - **refactor** - code change that neither fixes a bug nor adds a feature

- Your pull request has a detailed description
- You run `npm run format` to format the code

## Development Environment

Pocket ID consists of a frontend and backend. In production the frontend gets statically served by the backend, but in development they run as separate processes to enable hot reloading.

There are two ways to get the development environment setup:

### 1. Install required tools

#### With Dev Containers

If you use [Dev Containers](https://code.visualstudio.com/docs/remote/containers) in VS Code, you don't need to install anything manually, just follow the steps below.

1. Make sure you have [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension installed
2. Clone and open the repo in VS Code
3. VS Code will detect .devcontainer and will prompt you to open the folder in devcontainer
4. If the auto prompt does not work, hit `F1` and select `Dev Containers: Open Folder in Container.`, then select the pocket-id repo root folder and it'll open in container.

#### Without Dev Containers

If you don't use Dev Containers, you need to install the following tools manually:

- [Node.js](https://nodejs.org/en/download/) >= 22
- [Go](https://golang.org/doc/install) >= 1.24
- [Git](https://git-scm.com/downloads)

### 2. Setup

#### Backend

The backend is built with [Gin](https://gin-gonic.com) and written in Go. To set it up, follow these steps:

1. Open the `backend` folder
2. Copy the `.env.development-example` file to `.env` and edit the variables as needed
3. Start the backend with `go run -tags exclude_frontend ./cmd`

### Frontend

The frontend is built with [SvelteKit](https://kit.svelte.dev) and written in TypeScript. To set it up, follow these steps:

1. Open the `frontend` folder
2. Copy the `.env.development-example` file to `.env` and edit the variables as needed
3. Install the dependencies with `npm install`
4. Start the frontend with `npm run dev`

You're all set! The application is now listening on `localhost:3000`. The backend gets proxied trough the frontend in development mode.

### Testing

We are using [Playwright](https://playwright.dev) for end-to-end testing.

If you are contributing to a new feature please ensure that you add tests for it. The tests are located in the `tests` folder at the root of the project.

The tests can be run like this:

1. Visit the setup folder by running `cd tests/setup`

2. Start the test environment by running `docker compose up -d --build`

3. Go back to the test folder by running `cd ..`
4. Run the tests with `npx playwright test`

If you make any changes to the application, you have to rebuild the test environment by running `docker compose up -d --build` again.

---

// File: helping-out/translating

# Translating

Help us make Pocket ID accessible in your language by contributing translations.

## Translation Guidelines

- Use informal language for translations

## Getting Started

1. Visit our [Crowdin project page](https://crowdin.com/project/pocket-id).
2. Choose the language you wish to translate into.
3. Open the `en-US.json` source file.
4. Now you can start translating the strings.

## Adding a New Language

Is your language missing from Crowdin? You can [request its addition](https://github.com/pocket-id/pocket-id/issues/new?assignees=&labels=language-request&projects=&template=language-request.yml&title=%F0%9F%8C%90+Language+request%3A+%3Clanguage+name+in+english%3E).

## Need Help?

Encountering issues while translating? Join the [Localization discussion](https://github.com/pocket-id/pocket-id/discussions/370) to seek help and share experiences.

---

// File: introduction

# Introduction

Pocket ID is a simple OIDC provider that allows users to authenticate with their passkeys to your services.

The goal of Pocket ID is to be a simple and easy-to-use. There are other self-hosted OIDC providers like [Keycloak](https://www.keycloak.org/) or [ORY Hydra](https://www.ory.sh/hydra/) but they are often too complex for simple use cases.

Additionally, what makes Pocket ID special is that it only supports [passkey](https://www.passkeys.io/) authentication, which means you don’t need a password. Some people might not like this idea at first, but I believe passkeys are the future, and once you try them, you’ll love them. For example, you can now use a physical Yubikey to sign in to all your self-hosted services easily and securely.

## Get to know Pocket ID

→ [Try the Demo of Pocket ID](https://demo.pocket-id.org)

<img src="/img/landing/authorize_screenshot.png" width="700"/>

## Creator Reviews

→ Check out the video from **Tailscale** <br />

&nbsp;<iframe width="560" height="315" src="https://www.youtube.com/embed/sPUkAm7yDlU?si=nXasArwOzEhZdfF-" title="Tailscale Video" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

→ Check out the video from **Jim's Garage** <br />

&nbsp;<iframe width="560" height="315" src="https://www.youtube.com/embed/QC5IUmu7cgw" title="JimsGarage Video" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

## Useful Links

- [Installation](/docs/setup/installation)
- [Proxy Services](/docs/guides/proxy-services)
- [Client Examples](/docs/client-examples)

---

// File: setup/installation

# Installation

## Before you start

Pocket ID requires a [secure context](https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts), meaning it must be served over HTTPS. This is necessary because Pocket ID uses the [WebAuthn API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API).

You can use a reverse proxy like [Caddy](https://caddyserver.com/) or [NGINX](https://www.nginx.com/) to serve Pocket ID over HTTPS. Alternatively, you can use a service like [Cloudflare](https://www.cloudflare.com/) to provide HTTPS for your domain.

## Installation Methods

### Installation with Docker (recommended)

1. Download the `docker-compose.yml` and `.env` file:

   ```bash
    curl -O https://raw.githubusercontent.com/pocket-id/pocket-id/main/docker-compose.yml

    curl -o .env https://raw.githubusercontent.com/pocket-id/pocket-id/main/.env.example
   ```

2. Edit the `.env` file so that it fits your needs. See the [environment variables](/docs/configuration/environment-variables) section for more information.
3. Run `docker compose up -d`

You can now sign in with the admin account on `https://<your-app-url>/setup`.

### Stand-alone Installation

1. Download the latest binary from the [releases page](https://github.com/pocket-id/pocket-id/releases/latest).

   Make sure to download the correct version for your operating system. The binary names follow this pattern:

   - `pocket-id-<operating-system>-<architecture>`
   - Example: `pocket-id-linux-amd64`

   You can use curl to download the binary directly. For example, for Linux on AMD64 architecture:

   ```bash
   curl -L -o pocket-id-linux-amd64 https://github.com/pocket-id/pocket-id/releases/latest/download/pocket-id-linux-amd64
   ```

2. Rename the binary and make it executable:

   ```bash
   mv pocket-id-<operating-system>-<architecture> pocket-id
   chmod +x pocket-id
   ```

3. Download the `.env` file:

   ```bash
   curl -o .env https://raw.githubusercontent.com/pocket-id/pocket-id/main/.env.example
   ```

4. Edit the `.env` file so that it fits your needs. See the [environment variables](/docs/configuration/environment-variables) section for more information.
5. Run the binary:

   ```bash
   ./pocket-id
   ```

You can now sign in with the admin account on `https://<your-app-url>/setup`.

## Community Installation Methods

:::important
These installation methods are not officially supported, and services may not work as expected.
:::

### Proxmox

Run the [helper script](https://community-scripts.github.io/ProxmoxVE/scripts?id=pocketid) as root in your Proxmox shell.

**Configuration Paths**

- /opt/pocket-id/backend/.env
- /opt/pocket-id/frontend/.env

```bash
bash -c "$(wget -qLO - https://github.com/community-scripts/ProxmoxVE/raw/main/ct/pocketid.sh)"
```

### Unraid

Pocket ID is available as a template on the Community Apps store.

### Kubernetes Helm Chart

- A Helm chart maintained by @hobit44 is available [here](https://github.com/hobbit44/pocket-id-helm).
- A Helm chart maintained by anza-labs:

<div class="artifacthub-widget" data-url="https://artifacthub.io/packages/helm/anza-labs/pocket-id" data-theme="light" data-header="true" data-stars="true" data-responsive="false"><blockquote><p lang="en" dir="ltr"><b>pocket-id</b>: _pocket-id_ is a simple and easy-to-use OIDC provider that allows users to authenticate with their passkeys to your services. </p>&mdash; Open in <a href="https://artifacthub.io/packages/helm/anza-labs/pocket-id">Artifact Hub</a></blockquote></div><script async src="https://artifacthub.io/artifacthub-widget.js"></script>

### NixOS

A pocket-id module is available in NixOS Unstable.
It can be enabled by adding the following to your `configuration.nix`:

```nix
    services.pocket-id.enable = true;
```

For further configuration of the module, see the available [settings](https://search.nixos.org/options?channel=unstable&from=0&size=50&sort=relevance&type=packages&query=pocket-id).

## Installation from Source

It's not recommended to install Pocket ID from source unless you know what you're doing. The following instructions are provided for advanced users who want to customize or contribute to the project.

Required tools:

- [Node.js](https://nodejs.org/en/download/) >= 22
- [Go](https://golang.org/doc/install) >= 1.24
- [Git](https://git-scm.com/downloads)

1. Run the following commands:

   ```bash
   # Clone the repo
   git clone https://github.com/pocket-id/pocket-id
   cd pocket-id

   # Checkout latest version
   git fetch --tags && git checkout $(git describe --tags `git rev-list --tags --max-count=1`)

   # Build the frontend
   cd frontend
   npm ci
   npm run build

   # Build the backend
   cd ../backend/cmd
   go build -o ../../pocket-id

   # Create the .env file
   cd ../../
   cp .env.example .env
   ```

2. Edit the `.env` file so that it fits your needs. See the [environment variables](/docs/configuration/environment-variables) section for more information.
3. Run the binary:

```bash
./pocket-id
```

You can now sign in with the admin account on `https://<your-app-url>/setup`.

---

// File: setup/migrate-v1

# Migrating to v1.0

:::warning
v1.0 is a major release that includes breaking changes. Please read this migration guide carefully before upgrading.
:::

We hate breaking changes as much as you do, but we decided to bundle them all into the v1.0 release to make future upgrades easier. This guide will help you understand the changes and how to migrate your existing Pocket ID installation.

## Breaking Changes

### Port

- **Default Port Change**: The default port for Pocket ID has changed from `80` to `1411`.
- **New Port Variable**: As Caddy has been removed and the frontend is now served directly by the backend, you no longer need to set `CADDY_PORT` or `BACKEND_PORT`. Instead, you must use the new `PORT` environment variable to specify the port on which Pocket ID listens.

### Environment Variables

| Previous Variable            | New Variable           | Notes                                                                                    |
| ---------------------------- | ---------------------- | ---------------------------------------------------------------------------------------- |
| `PUBLIC_APP_URL`             | `APP_URL`              | Variable renamed                                                                         |
| `PUBLIC_UI_CONFIG_DISABLED`  | `UI_CONFIG_DISABLED`   | Variable renamed                                                                         |
| `CADDY_DISABLED`             | Removed                | Not necessary anymore                                                                    |
| `CADDY_PORT`                 | `PORT`                 | Use new `PORT` variable                                                                  |
| `BACKEND_PORT`               | `PORT`                 | Use new `PORT` variable                                                                  |
| `POSTGRES_CONNECTION_STRING` | `DB_CONNECTION_STRING` | Variable renamed. See [Database Configuration](#database-configuration)                  |
| `SQLITE_DB_PATH`             | `DB_CONNECTION_STRING` | Now uses connection string format. See [Database Configuration](#database-configuration) |
| `INTERNAL_BACKEND_URL`       | Removed                | Not necessary anymore                                                                    |

### Database Configuration

#### SQLite Configuration

- The `SQLITE_DB_PATH` environment variable has been removed (**deprecated** since [v0.45.0](https://github.com/pocket-id/pocket-id/releases/tag/v0.45.0))
- You must now use the `DB_CONNECTION_STRING` with SQLite connection string format:
  - Old: `SQLITE_DB_PATH=data/pocket-id.db`
  - New: `DB_CONNECTION_STRING=file:data/pocket-id.db?_pragma=journal_mode(WAL)&_pragma=busy_timeout(2500)&_txlock=immediate`

#### PostgreSQL Connection

- `POSTGRES_CONNECTION_STRING` has been removed (**deprecated** since [v0.45.0](https://github.com/pocket-id/pocket-id/releases/tag/v0.45.0))
- You must now use the `DB_CONNECTION_STRING`. The PostgreSQL connection string format remains the same:
  - Old: `POSTGRES_CONNECTION_STRING=postgresql://username:password@host:port/database`
  - New: `DB_CONNECTION_STRING=postgresql://username:password@host:port/database`

### Reverse Proxy Configuration

This releases removes the integrated Caddy server, which was used for reverse proxying and serving the frontend. **There are no actions required if you haven't disabled Caddy with `CADDY_DISABLED=true`.**

If you previously disabled Caddy, you likely had path mappings in your reverse proxy configuration. With v1.0:

- Path mappings to `/api/` and `/.well-known` are no longer necessary
- Your reverse proxy should now point directly to Pocket ID on port 1411 (or the port set with the `PORT` variable)

## Migration Steps

Follow the following steps to migrate from previous versions to v1.0.

### Docker

1. Adapt your `docker-compose.yml` for the new version:

   - **Change the port**: Update the internal port to `1411`
   - **Change the volume path**: Update the target path for the volume to `/app/data`
   - **Update the healthcheck**: Change the port in the healthcheck to `1411`

   ```yaml
   services:
     pocket-id:
       image: ghcr.io/pocket-id/pocket-id:latest
       ports:
         - "1411:1411" # Change the port
       volumes:
         - ./data:/app/data # Update the volume path
       healthcheck:
         test: "curl -f http://localhost:1411/healthz" # Update the port in the healthcheck
         interval: 1m30s
         timeout: 5s
         retries: 2
         start_period: 10s
   ```

2. Adapt the environment variables [mentioned above](#environment-variables) in your `.env` file.
3. Apply the changes by running:

   ```bash
   docker compose up -d
   ```

### Standalone

While you still can build Pocket ID from source, it's now much easier to install and upgrade Pocket ID by using the prebuilt binaries.
To migrate from previous versions to v1.0 and use the prebuilt binaries, follow these steps:

1. Stop Pocket ID if it's currently running.
2. Create a backup of the folder that contains your Pocket ID installation.
   ```bash
   cp -r /path/to/pocket-id /path/to/pocket-id-old
   ```
3. Download the latest binary from the [releases page](https://github.com/pocket-id/pocket-id/releases/latest).

   Make sure to download the correct version for your operating system. The binary names follow this pattern:

   - `pocket-id-<operating-system>-<architecture>`
   - Example: `pocket-id-linux-amd64`

   You can use curl to download the binary directly. For example, for Linux on AMD64 architecture:

   ```bash
   curl -L -o pocket-id-linux-amd64 https://github.com/pocket-id/pocket-id/releases/latest/download/pocket-id-linux-amd64
   ```

4. Rename the binary and make it executable:

   ```bash
   mv pocket-id-<operating-system>-<architecture> pocket-id
   chmod +x pocket-id
   ```

5. If you haven't edited the default paths where data is stored, like `UPLOAD_PATH`, `DB_CONNECTION_STRING`, `GEOLITE_DB_PATH` and `KEYS_PATH` everything is stored in the `data` directory. Because of that you have to move the `data` directory to the same folder as the new binary.

   Copy the `data` directory from the old Pocket ID installation to the same folder as the new binary:

   ```bash
   cp -r /path/to/pocket-id-old/data /path/to/pocket-id/data
   ```

6. Create a `.env` file in the same directory as the binary. Previously you had two `.env` files, one in the `frontend` directory and one in the `backend` directory.

   You have to merge these two files into one `.env` file in the same directory as the binary. Make sure to also adapt the environment variables like [mentioned above](#environment-variables)

Enjoy Pocket ID v1.0! We're grateful for your ongoing support and contributions that made this milestone release possible.

---

// File: setup/user-management

# User Management

Creating users in Pocket ID can be handled in two ways:

1. Manually create users via the admin interface.
2. Sync users from an [LDAP](/docs/configuration/ldap) source.

Once users have been created using one of the methods above, follow the steps below to help configure passkeys for them.

## Setting Up User Passkeys

> As the admin, you cannot add passkeys for users; end users must configure them on their own.

> Passkeys can be stored in services like Bitwarden, LastPass, iCloud, or even locally on certain devices using platform authenticators.

### One-Time Link

1. Navigate to the **Users** page in the Pocket ID admin dashboard.
2. Locate the user you want to set up a passkey for.
3. Click the **three dots** on the right side of the user row.
4. Click **One-Time Link**.
5. Select an **Expiration Time** for the link.
6. Click **Generate Link** and send it to the user to allow them to set up their new passkey.

### One-Time Access Email

> **This method requires a valid SMTP server set up in Pocket ID.**

> **Allowing users to sign in with a link sent to their email significantly reduces security, as anyone with access to the user's email can gain entry.**

1. Navigate to the **Application Configuration** section in the Pocket ID admin dashboard.
2. Expand the **Email** section and enable the **Email One-Time Access** option.
3. Instruct the user to navigate to Pocket ID, e.g., `https://id.example.com`.
4. Have the user click on the **Don't have access to your passkey?** link at the bottom of the page.
5. Have the user enter their email associated with their Pocket ID account and click **Submit**.
6. The user will receive an email with a **One-Time Access** link to set up their passkey.

### Signup Tokens 

Since Pocket ID [v1.5.0+](https://github.com/pocket-id/pocket-id/pull/672), an admin can create a Signup Token Link with a customizable expiry date and use limit. Users can use this link to create their account and initial passkey.

To enable this functionality:

1. Goto **Application Configuration** > **Enable User Signups**
2. Change the dropdown value to `Signup with token`
3. Goto **Users** > **Add User** dropdown > **Create Signup Token**

You can also view existing tokens and revoke them:

1. Goto **Users** > **Add User** dropdown > **View Active Signup Tokens**

---

// File: setup/upgrading

# Upgrading

Updating to a New Version

## Docker

For upgrading Pocket ID when using Docker, you just need to pull the latest image and restart the services:

```bash
docker compose pull
docker compose up -d
```

## Stand-alone

1. Stop Pocket ID
2. Remove the old binary:

   ```bash
   rm pocket-id
   ```

3. Download the latest binary from the [releases page](https://github.com/pocket-id/pocket-id/releases/latest).

   Make sure to download the correct version for your operating system. The binary names follow this pattern:

   - `pocket-id-<operating-system>-<architecture>`
   - Example: `pocket-id-linux-amd64`

   You can use curl to download the binary directly. For example, for Linux on AMD64 architecture:

   ```bash
   curl -L -o pocket-id-linux-amd64 https://github.com/pocket-id/pocket-id/releases/latest/download/pocket-id-linux-amd64
   ```

4. Rename the binary and make it executable:

   ```bash
   mv pocket-id-<operating-system>-<architecture> pocket-id
   chmod +x pocket-id
   ```

5. Start Pocket ID again:

   ```bash
   ./pocket-id
   ```

---

// File: troubleshooting/account-recovery

# Account recovery

There are two ways to create a one-time access link for a user:

1. **UI**: An admin can create a one-time access link for the user in the admin panel under the "Users" tab by clicking on the three dots next to the user's name and selecting "One-time link".
2. **Terminal**: You can create a one-time access link for a user by running `pocket-id one-time-access-token <user name or email>`. To execute this script with Docker you have to run the following command:
   ```bash
   docker compose exec pocket-id /app/pocket-id one-time-access-token <user name or email>
   ```

---

// File: troubleshooting/common-issues

# Common Issues

## Unable to Add a Passkey

Ensure that the `APP_URL` is set correctly to the public URL of the Pocket ID instance.

Example:

```ini
APP_URL=https://id.example.com
```

## Unable to Access the Admin UI After Setup

To set up the initial passkey for the admin user, navigate to:

```
https://id.example.com/setup
```

## Invalid Callback URL

One of the most common issues with OIDC clients is a misconfigured `Callback URL`.

If the `redirect_uri` URL parameter starts with `http` but `https` is expected, the client is the issue. If you can’t resolve the issue on the client side, you can add a secondary callback URL using both `http` and `https` versions.